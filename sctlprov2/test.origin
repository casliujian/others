test.model
import Dummy
Function test s:(Type 18) :(Type 21)=
if (s:(Type 19)<7:int):bool then ((s:(Type 20)+1:int):int) else (1:int):int
Var z:(Type 3)=4:int
datatype t2=int
Var y:(Type 2)=20:int
datatype day=Monday | Tuesday | Wednesday | Thursday | Friday | Saturday | Sunday
Function is_sunday d:(Type 15) :(day )->(bool)=
(d:(Type 16)=Sunday:(Type 17)):bool
Val x:(Type 1)=10:int
datatype t3={x:int;y:bool;}
Function day_of_z z:(Type 4) :(int)->(day )=
match z:(Type 5) with
| 1:int -> Monday:(Type 6)
| 2:int -> Tuesday:(Type 7)
| 3:int -> Wednesday:(Type 8)
| 4:int -> Thursday:(Type 9)
| 5:int -> Friday:(Type 10)
| 6:int -> Saturday:(Type 11)
| _:(Type 12) -> Sunday:(Type 13)

:(Type 14)
transition s:(Type 22)=
if (s:(Type 23)<7:int):bool then ((s:(Type 24)+1:int):int) else (1:int):int
property dummy=is_sunday day_of_z 1:int:(Type 25)
property reach_sunday=AF (x,is_sunday day_of_z x:(Type 26):(Type 27),1:int)
