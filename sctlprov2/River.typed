river.model
Val init:{cabbage:bool;goat:bool;wolf:bool;farmer:bool;}={cabbage=false:bool;goat=false:bool;wolf=false:bool;farmer=false:bool;}:{cabbage:bool;goat:bool;wolf:bool;farmer:bool;}

Function safe x:st  :(st )->(bool)=
let (s:int;t:int):(int, int) = (1:int,2:int):(int, int):unit;
((! ((x.farmer:(Type 5)!=x.wolf:(Type 5)):bool&&(x.wolf:(Type 7)=x.goat:(Type 7)):bool):bool):bool&&(! ((x.farmer:(Type 9)!=x.goat:(Type 9)):bool&&(x.goat:(Type 11)=x.cabbage:(Type 11)):bool):bool):bool):bool;
:bool

datatype st={farmer:bool;wolf:bool;goat:bool;cabbage:bool;}

Function okay y:st  :(st )->(bool)=
((((y.farmer:bool=true:bool):bool&&(y.wolf:bool=true:bool):bool):bool&&(y.goat:bool=true:bool):bool):bool&&(y.cabbage:bool=true:bool):bool):bool

transition s:(Type 19) = 
(s.farmer:(Type 20)=s.wolf:(Type 20)):bool : s:(Type 19) with {wolf=(! s.wolf:bool):bool;farmer=(! s.farmer:bool):bool;}:(Type 19);
(s.farmer:(Type 25)=s.goat:(Type 25)):bool : s:(Type 19) with {goat=(! s.goat:bool):bool;farmer=(! s.farmer:bool):bool;}:(Type 19);
(s.farmer:(Type 30)=s.cabbage:(Type 30)):bool : s:(Type 19) with {cabbage=(! s.cabbage:bool):bool;farmer=(! s.farmer:bool):bool;}:(Type 19);
true:bool : s:(Type 19) with {farmer=(! s.farmer:bool):bool;}:(Type 19);
property find=EU (x,y,safe x:{cabbage:bool;goat:bool;wolf:bool;farmer:bool;},okay y:{cabbage:bool;goat:bool;wolf:bool;farmer:bool;},init:{cabbage:bool;goat:bool;wolf:bool;farmer:bool;})
