type token =
  | Int of (int)
  | Float of (float)
  | Iden of (string)
  | UIden of (string)
  | Import
  | Datatype
  | Vertical
  | Val
  | Var
  | Match
  | With
  | Underline
  | Model
  | Transition
  | Property
  | If
  | Then
  | Else
  | For
  | In
  | While
  | Do
  | Done
  | LB1
  | RB1
  | LB2
  | RB2
  | LB3
  | RB3
  | Equal
  | Non_Equal
  | LT
  | GT
  | LE
  | GE
  | Comma
  | Semicolon
  | Dot
  | DotDot
  | Arrow
  | EOF
  | Add
  | AddDot
  | Minus
  | MinusDot
  | Mult
  | MultDot
  | Negb
  | Ando
  | Oro
  | And
  | Or
  | Neg
  | LArrow
  | Colon
  | ColonColon
  | Init
  | Top
  | Bottom
  | AX
  | EX
  | AF
  | EG
  | AR
  | EU
  | True
  | False
  | Function
  | TLst
  | TFloat
  | TAray
  | TInt
  | TBool
  | TUnt

open Parsing;;
let _ = parse_error;;
# 2 "parser_yacc.mly"
    open Ast

    let imported = ref []
    let symbol_tbl:(Ast.psymbol_tbl) = Hashtbl.create 1
    let kripke_model = ref None
    let type_var = ref 0
    let new_type_var () = 
        incr type_var;
        !type_var

    let erase_type_args t args = 
        let tmp_t = ref t in
        let rec erase_type_args_i pt i = 
            match pt with
            | PTUdt (str, pts) -> 
                let a = List.nth args i in
                if a=str then
                    PTVar (-i-1)
                else 
                    PTUdt (str, List.map (fun pt -> erase_type_args_i pt i) pts) 
            | PTAray pt1 -> PTAray (erase_type_args_i pt1 i) 
            | PTLst pt1 -> PTLst (erase_type_args_i pt1 i)
            | PTTuple pts -> PTTuple (List.map (fun pt -> erase_type_args_i pt i) pts)
            | PTRecord str_pts -> PTRecord (List.map (fun (str, pt) -> (str, erase_type_args_i pt i)) str_pts)
            | _ -> pt
        in
        for i = 0 to (List.length args) do
            tmp_t := erase_type_args_i !tmp_t i
        done;
        !tmp_t
# 111 "parser_yacc.ml"
let yytransl_const = [|
  261 (* Import *);
  262 (* Datatype *);
  263 (* Vertical *);
  264 (* Val *);
  265 (* Var *);
  266 (* Match *);
  267 (* With *);
  268 (* Underline *);
  269 (* Model *);
  270 (* Transition *);
  271 (* Property *);
  272 (* If *);
  273 (* Then *);
  274 (* Else *);
  275 (* For *);
  276 (* In *);
  277 (* While *);
  278 (* Do *);
  279 (* Done *);
  280 (* LB1 *);
  281 (* RB1 *);
  282 (* LB2 *);
  283 (* RB2 *);
  284 (* LB3 *);
  285 (* RB3 *);
  286 (* Equal *);
  287 (* Non_Equal *);
  288 (* LT *);
  289 (* GT *);
  290 (* LE *);
  291 (* GE *);
  292 (* Comma *);
  293 (* Semicolon *);
  294 (* Dot *);
  295 (* DotDot *);
  296 (* Arrow *);
    0 (* EOF *);
  297 (* Add *);
  298 (* AddDot *);
  299 (* Minus *);
  300 (* MinusDot *);
  301 (* Mult *);
  302 (* MultDot *);
  303 (* Negb *);
  304 (* Ando *);
  305 (* Oro *);
  306 (* And *);
  307 (* Or *);
  308 (* Neg *);
  309 (* LArrow *);
  310 (* Colon *);
  311 (* ColonColon *);
  312 (* Init *);
  313 (* Top *);
  314 (* Bottom *);
  315 (* AX *);
  316 (* EX *);
  317 (* AF *);
  318 (* EG *);
  319 (* AR *);
  320 (* EU *);
  321 (* True *);
  322 (* False *);
  323 (* Function *);
  324 (* TLst *);
  325 (* TFloat *);
  326 (* TAray *);
  327 (* TInt *);
  328 (* TBool *);
  329 (* TUnt *);
    0|]

let yytransl_block = [|
  257 (* Int *);
  258 (* Float *);
  259 (* Iden *);
  260 (* UIden *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\002\000\002\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\005\000\005\000\008\000\009\000\
\009\000\004\000\012\000\012\000\013\000\014\000\014\000\014\000\
\014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
\014\000\015\000\015\000\016\000\016\000\017\000\017\000\006\000\
\006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
\006\000\006\000\006\000\006\000\018\000\018\000\021\000\021\000\
\019\000\019\000\020\000\022\000\022\000\023\000\010\000\010\000\
\024\000\024\000\007\000\007\000\007\000\007\000\007\000\007\000\
\007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
\007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
\007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
\007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
\007\000\007\000\007\000\007\000\007\000\026\000\026\000\030\000\
\030\000\025\000\025\000\025\000\027\000\027\000\027\000\028\000\
\029\000\029\000\031\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\033\000\033\000\032\000\032\000\000\000"

let yylen = "\002\000\
\003\000\004\000\000\000\003\000\000\000\006\000\005\000\006\000\
\005\000\006\000\006\000\007\000\000\000\002\000\002\000\001\000\
\002\000\013\000\000\000\002\000\004\000\001\000\001\000\002\000\
\002\000\003\000\003\000\008\000\008\000\008\000\008\000\012\000\
\012\000\000\000\002\000\001\000\003\000\001\000\002\000\001\000\
\001\000\001\000\001\000\002\000\002\000\001\000\002\000\001\000\
\003\000\001\000\003\000\003\000\001\000\003\000\003\000\003\000\
\003\000\003\000\003\000\001\000\002\000\004\000\001\000\001\000\
\003\000\003\000\001\000\003\000\003\000\001\000\001\000\002\000\
\005\000\003\000\001\000\001\000\005\000\003\000\002\000\003\000\
\003\000\002\000\002\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\004\000\
\005\000\005\000\011\000\003\000\004\000\005\000\001\000\002\000\
\002\000\004\000\004\000\004\000\003\000\001\000\003\000\001\000\
\002\000\000\000\001\000\003\000\000\000\004\000\005\000\002\000\
\002\000\003\000\003\000\001\000\001\000\001\000\002\000\005\000\
\002\000\003\000\003\000\001\000\005\000\001\000\002\000\003\000\
\001\000\003\000\001\000\003\000\002\000"

let yydefred = "\000\000\
\003\000\000\000\141\000\000\000\000\000\000\000\004\000\000\000\
\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\125\000\126\000\124\000\000\000\
\132\000\000\000\000\000\000\000\000\000\014\000\000\000\070\000\
\071\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\075\000\
\076\000\000\000\000\000\000\000\000\000\000\000\000\000\042\000\
\000\000\040\000\041\000\043\000\000\000\048\000\000\000\050\000\
\000\000\000\000\000\000\000\000\000\000\127\000\000\000\000\000\
\129\000\000\000\000\000\000\000\000\000\000\000\017\000\000\000\
\000\000\000\000\105\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\072\000\000\000\000\000\064\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\047\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\136\000\000\000\000\000\000\000\130\000\011\000\000\000\
\000\000\000\000\000\000\000\000\000\000\113\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\109\000\000\000\000\000\
\000\000\000\000\074\000\000\000\000\000\078\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\052\000\000\000\049\000\000\000\059\000\061\000\000\000\
\037\000\000\000\000\000\000\000\000\000\140\000\012\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\066\000\000\000\000\000\000\000\116\000\000\000\
\000\000\000\000\108\000\000\000\054\000\000\000\058\000\000\000\
\000\000\000\000\133\000\128\000\000\000\121\000\000\000\000\000\
\097\000\000\000\098\000\000\000\077\000\073\000\118\000\000\000\
\102\000\000\000\056\000\062\000\000\000\138\000\000\000\122\000\
\120\000\000\000\111\000\119\000\000\000\123\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\018\000\020\000\099\000\000\000\000\000\000\000\022\000\023\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\024\000\025\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\035\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\027\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\028\000\029\000\030\000\031\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\032\000\
\033\000"

let yydgoto = "\002\000\
\003\000\004\000\006\000\014\000\022\000\069\000\144\000\025\000\
\036\000\102\000\082\000\013\001\014\001\031\001\033\001\070\000\
\071\000\131\000\134\000\072\000\193\000\136\000\137\000\103\000\
\106\000\221\000\108\000\241\000\214\000\091\000\238\000\083\000\
\204\000"

let yysindex = "\006\000\
\000\000\000\000\000\000\032\255\035\255\019\003\000\000\042\255\
\052\255\096\255\101\255\000\000\130\255\144\000\163\255\059\255\
\064\255\111\255\091\005\000\000\163\255\150\255\072\009\001\255\
\157\255\072\009\167\255\169\255\000\000\000\000\000\000\091\005\
\000\000\024\005\220\255\072\255\207\255\000\000\001\255\000\000\
\000\000\160\255\185\008\187\255\197\255\072\009\072\009\210\255\
\072\009\251\008\043\009\215\255\072\009\072\009\072\009\000\000\
\000\000\180\010\007\255\001\255\001\255\225\255\001\255\000\000\
\001\255\000\000\000\000\000\000\189\255\000\000\223\255\000\000\
\072\009\180\010\072\009\072\009\181\255\000\000\252\254\091\005\
\000\000\049\255\218\255\072\009\241\255\091\005\000\000\189\255\
\072\009\106\255\000\000\072\009\180\010\247\255\253\255\205\010\
\235\009\217\255\004\010\000\000\168\009\212\255\000\000\072\009\
\029\010\228\255\009\000\005\255\027\000\027\000\027\000\029\000\
\072\009\072\009\072\009\072\009\072\009\072\009\072\009\072\009\
\072\009\072\009\072\009\072\009\072\009\072\009\072\009\072\009\
\001\255\189\255\000\000\189\255\013\255\033\000\007\000\030\000\
\225\255\189\255\189\255\001\255\056\000\180\010\180\010\054\010\
\025\000\000\000\091\005\057\000\091\005\000\000\000\000\072\009\
\181\255\027\000\043\009\072\009\072\009\000\000\027\000\072\009\
\072\009\002\255\072\009\037\000\072\009\000\000\072\009\072\009\
\058\000\072\009\000\000\072\009\043\000\000\000\215\255\079\010\
\027\000\027\000\142\005\142\005\142\005\142\005\147\255\147\255\
\147\255\147\255\057\255\057\255\186\255\175\255\208\255\149\255\
\063\000\000\000\001\255\000\000\001\255\000\000\000\000\189\255\
\000\000\080\000\110\255\081\000\055\000\000\000\000\000\196\009\
\027\000\027\000\027\000\027\000\091\005\113\000\106\000\072\009\
\102\000\054\010\000\000\104\010\101\000\100\000\000\000\091\000\
\072\009\014\255\000\000\001\255\000\000\008\255\000\000\053\255\
\091\005\091\005\000\000\000\000\102\255\000\000\091\005\072\009\
\000\000\130\010\000\000\072\009\000\000\000\000\000\000\092\000\
\000\000\010\255\000\000\000\000\036\255\000\000\072\009\000\000\
\000\000\072\009\000\000\000\000\072\009\000\000\155\010\093\000\
\109\000\117\000\072\009\137\000\120\000\117\000\132\000\131\000\
\000\000\000\000\000\000\000\255\072\009\000\255\000\000\000\000\
\149\000\151\000\163\000\165\000\166\000\167\000\132\255\106\255\
\000\000\000\000\189\000\190\000\191\000\192\000\193\000\194\000\
\000\255\000\255\000\000\162\000\171\000\180\000\186\000\204\000\
\218\000\148\000\000\000\000\255\000\255\000\255\000\255\225\000\
\255\000\005\000\072\000\206\000\017\001\223\000\224\000\072\009\
\072\009\072\009\072\009\000\255\000\255\236\000\237\000\238\000\
\239\000\084\001\151\001\000\000\000\000\000\000\000\000\000\255\
\000\255\218\001\029\002\072\009\072\009\240\000\241\000\000\000\
\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\085\003\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\244\000\000\000\
\000\000\000\000\000\000\000\000\244\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\062\008\
\000\000\000\000\000\000\000\000\089\255\000\000\000\000\000\000\
\000\000\119\006\170\006\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\001\004\001\000\000\000\000\000\000\000\000\
\000\000\152\003\127\007\162\007\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\009\001\000\000\171\007\000\000\
\000\000\217\003\000\000\000\000\119\009\000\000\000\000\000\000\
\000\000\029\255\000\000\000\000\000\000\000\000\000\000\030\004\
\000\000\093\007\000\000\000\000\006\006\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\015\001\000\000\000\000\058\001\
\093\255\000\000\000\000\000\000\001\000\068\000\135\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\060\007\000\000\210\007\000\000\000\000\000\000\000\000\
\040\001\224\007\000\008\000\000\000\000\095\004\162\004\225\006\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\150\009\202\000\000\001\000\000\000\000\000\000\013\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\094\255\000\000\000\000\000\000\000\000\004\001\000\000\
\214\001\025\002\250\004\061\005\128\005\195\005\238\003\049\004\
\116\004\183\004\104\003\171\003\037\003\092\002\073\006\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\009\008\
\000\000\000\000\045\001\000\000\000\000\000\000\000\000\000\000\
\001\000\068\000\159\002\226\002\000\000\080\001\147\001\000\000\
\000\000\036\007\000\000\046\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\047\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\048\001\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\056\001\000\000\000\000\000\000\056\001\000\000\000\000\
\000\000\000\000\000\000\000\000\247\254\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\116\255\247\254\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\004\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000"

let yygindex = "\000\000\
\000\000\000\000\000\000\000\000\053\002\219\255\005\009\139\000\
\038\002\172\008\237\255\062\001\000\000\043\255\055\001\192\001\
\000\000\000\000\075\255\000\000\122\001\219\001\000\000\207\001\
\168\255\144\001\217\001\000\000\000\000\047\002\155\001\188\255\
\161\001"

let yytablesize = 3074
let yytable = "\037\000\
\082\000\088\000\021\001\059\000\060\000\034\000\001\000\173\000\
\213\000\059\000\060\000\148\000\077\000\231\000\079\000\169\000\
\173\000\037\000\026\000\034\000\146\000\130\000\132\000\133\000\
\061\000\138\000\034\000\139\000\062\000\175\000\129\000\147\000\
\026\000\174\000\062\000\139\000\005\000\194\000\007\000\026\000\
\034\000\034\000\249\000\195\000\015\000\228\000\231\000\140\000\
\195\000\140\000\086\000\022\001\140\000\026\000\016\000\139\000\
\023\001\024\001\025\001\026\001\027\001\028\001\029\001\030\001\
\034\001\005\001\153\000\083\000\063\000\064\000\065\000\066\000\
\067\000\068\000\063\000\064\000\065\000\066\000\067\000\068\000\
\206\000\223\000\113\000\050\001\051\001\149\000\114\000\115\000\
\023\000\252\000\086\000\192\000\140\000\026\000\058\001\059\001\
\060\001\061\001\017\000\115\000\114\000\084\000\200\000\086\000\
\126\000\127\000\040\000\041\000\042\000\043\000\074\001\075\001\
\024\000\044\000\045\000\046\000\112\000\024\000\016\000\115\000\
\114\000\047\000\082\001\083\001\048\000\024\000\049\000\203\000\
\018\000\050\000\021\000\155\000\019\000\052\000\079\000\114\000\
\115\000\116\000\117\000\118\000\119\000\255\000\016\000\020\000\
\021\000\234\000\120\000\121\000\156\000\157\000\124\000\125\000\
\055\000\126\000\127\000\027\000\086\000\230\000\128\000\232\000\
\040\000\041\000\042\000\043\000\086\000\021\000\028\000\044\000\
\045\000\046\000\056\000\057\000\113\000\194\000\085\000\047\000\
\114\000\115\000\048\000\039\000\049\000\041\001\042\001\050\000\
\228\000\051\000\073\000\052\000\140\000\094\000\250\000\124\000\
\125\000\237\000\126\000\127\000\075\000\089\000\076\000\095\000\
\113\000\068\000\053\000\054\000\114\000\115\000\055\000\029\000\
\030\000\031\000\032\000\113\000\098\000\253\000\203\000\114\000\
\115\000\107\000\033\000\237\000\029\000\030\000\031\000\032\000\
\056\000\057\000\080\000\135\000\140\000\141\000\034\000\033\000\
\035\000\113\000\127\000\086\000\164\000\114\000\115\000\116\000\
\117\000\118\000\119\000\034\000\150\000\035\000\081\000\168\000\
\120\000\121\000\122\000\123\000\124\000\125\000\171\000\126\000\
\127\000\082\000\082\000\082\000\082\000\086\000\082\000\082\000\
\082\000\082\000\082\000\082\000\069\000\082\000\152\000\082\000\
\082\000\082\000\082\000\082\000\160\000\082\000\082\000\082\000\
\082\000\082\000\161\000\082\000\082\000\082\000\082\000\082\000\
\082\000\082\000\082\000\082\000\082\000\082\000\172\000\082\000\
\064\001\082\000\082\000\082\000\082\000\082\000\082\000\082\000\
\082\000\082\000\082\000\082\000\113\000\082\000\041\001\042\001\
\175\000\196\000\198\000\060\000\197\000\202\000\216\000\205\000\
\222\000\082\000\082\000\082\000\083\000\083\000\083\000\083\000\
\225\000\083\000\083\000\083\000\083\000\083\000\083\000\101\000\
\083\000\236\000\083\000\083\000\083\000\083\000\083\000\229\000\
\083\000\083\000\083\000\083\000\083\000\233\000\083\000\083\000\
\083\000\083\000\083\000\083\000\083\000\083\000\083\000\083\000\
\083\000\235\000\083\000\065\001\083\000\083\000\083\000\083\000\
\083\000\083\000\083\000\083\000\083\000\083\000\083\000\239\000\
\083\000\041\001\042\001\240\000\243\000\245\000\246\000\247\000\
\004\001\010\001\011\001\012\001\083\000\083\000\083\000\079\000\
\079\000\079\000\079\000\016\001\079\000\079\000\079\000\079\000\
\079\000\079\000\096\000\079\000\017\001\079\000\079\000\079\000\
\079\000\079\000\019\001\079\000\079\000\079\000\079\000\079\000\
\020\001\079\000\079\000\079\000\079\000\079\000\079\000\079\000\
\079\000\079\000\079\000\079\000\035\001\079\000\036\001\079\000\
\079\000\079\000\079\000\079\000\079\000\079\000\079\000\079\000\
\079\000\079\000\037\001\079\000\038\001\039\001\040\001\044\001\
\045\001\046\001\047\001\048\001\049\001\052\001\042\001\079\000\
\079\000\079\000\068\000\068\000\068\000\068\000\053\001\068\000\
\068\000\068\000\068\000\068\000\068\000\090\000\068\000\054\001\
\068\000\068\000\068\000\068\000\068\000\055\001\068\000\068\000\
\068\000\068\000\068\000\062\001\068\000\068\000\068\000\068\000\
\068\000\068\000\068\000\068\000\068\000\068\000\068\000\056\001\
\068\000\066\001\068\000\068\000\068\000\068\000\068\000\068\000\
\068\000\068\000\068\000\068\000\068\000\057\001\068\000\041\001\
\042\001\063\001\068\001\069\001\076\001\077\001\078\001\079\001\
\088\001\089\001\068\000\068\000\068\000\069\000\069\000\069\000\
\069\000\013\000\069\000\069\000\069\000\069\000\069\000\069\000\
\091\000\069\000\114\000\069\000\069\000\069\000\069\000\069\000\
\117\000\069\000\069\000\069\000\069\000\069\000\015\000\069\000\
\069\000\069\000\069\000\069\000\069\000\069\000\069\000\069\000\
\069\000\069\000\063\000\069\000\067\001\069\000\069\000\069\000\
\069\000\069\000\069\000\069\000\069\000\069\000\069\000\069\000\
\114\000\069\000\041\001\042\001\060\000\137\000\110\000\057\000\
\055\000\038\000\087\000\018\001\201\000\069\000\069\000\069\000\
\101\000\101\000\101\000\101\000\019\000\101\000\043\001\101\000\
\101\000\101\000\101\000\081\000\101\000\251\000\101\000\101\000\
\101\000\101\000\101\000\199\000\101\000\101\000\101\000\101\000\
\101\000\101\000\101\000\101\000\101\000\101\000\101\000\101\000\
\101\000\101\000\101\000\101\000\101\000\219\000\101\000\080\001\
\101\000\101\000\101\000\101\000\101\000\101\000\101\000\101\000\
\101\000\101\000\101\000\003\001\101\000\041\001\042\001\226\000\
\158\000\000\001\254\000\000\000\000\000\000\000\000\000\000\000\
\101\000\101\000\101\000\096\000\096\000\096\000\096\000\000\000\
\096\000\096\000\096\000\096\000\096\000\096\000\106\000\096\000\
\000\000\096\000\096\000\096\000\000\000\096\000\000\000\096\000\
\096\000\096\000\096\000\096\000\096\000\096\000\096\000\096\000\
\096\000\096\000\096\000\096\000\096\000\096\000\096\000\096\000\
\000\000\096\000\081\001\096\000\096\000\096\000\096\000\096\000\
\096\000\096\000\096\000\096\000\096\000\096\000\000\000\096\000\
\041\001\042\001\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\096\000\096\000\096\000\090\000\090\000\
\090\000\090\000\000\000\090\000\090\000\090\000\090\000\090\000\
\090\000\107\000\090\000\000\000\090\000\090\000\090\000\090\000\
\090\000\000\000\090\000\090\000\090\000\090\000\090\000\000\000\
\090\000\090\000\090\000\000\000\000\000\090\000\090\000\090\000\
\090\000\090\000\090\000\000\000\090\000\084\001\090\000\090\000\
\090\000\090\000\090\000\090\000\090\000\090\000\090\000\090\000\
\090\000\000\000\090\000\041\001\042\001\000\000\000\000\000\000\
\000\000\000\000\012\000\000\000\000\000\000\000\090\000\090\000\
\090\000\091\000\091\000\091\000\091\000\000\000\091\000\091\000\
\091\000\091\000\091\000\091\000\080\000\091\000\000\000\091\000\
\091\000\091\000\091\000\091\000\000\000\091\000\091\000\091\000\
\091\000\091\000\000\000\091\000\091\000\091\000\000\000\000\000\
\091\000\091\000\091\000\091\000\091\000\091\000\000\000\091\000\
\085\001\091\000\091\000\091\000\091\000\091\000\091\000\091\000\
\091\000\091\000\091\000\091\000\000\000\091\000\041\001\042\001\
\000\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\
\000\000\091\000\091\000\091\000\081\000\081\000\081\000\081\000\
\000\000\081\000\081\000\081\000\081\000\081\000\081\000\086\000\
\081\000\000\000\081\000\081\000\081\000\081\000\081\000\000\000\
\081\000\081\000\081\000\081\000\081\000\000\000\081\000\081\000\
\081\000\000\000\000\000\081\000\081\000\081\000\081\000\081\000\
\081\000\000\000\081\000\000\000\081\000\081\000\081\000\081\000\
\081\000\081\000\081\000\081\000\081\000\081\000\081\000\000\000\
\081\000\000\000\000\000\000\000\000\000\000\000\000\000\009\000\
\000\000\000\000\000\000\000\000\081\000\081\000\081\000\106\000\
\106\000\106\000\106\000\000\000\106\000\106\000\106\000\106\000\
\106\000\106\000\089\000\106\000\000\000\106\000\106\000\106\000\
\106\000\106\000\000\000\106\000\106\000\106\000\106\000\106\000\
\000\000\106\000\106\000\106\000\000\000\000\000\106\000\106\000\
\106\000\106\000\106\000\106\000\000\000\106\000\000\000\106\000\
\106\000\106\000\106\000\106\000\106\000\106\000\106\000\106\000\
\106\000\106\000\000\000\106\000\000\000\000\000\000\000\000\000\
\007\000\000\000\000\000\000\000\000\000\000\000\000\000\106\000\
\106\000\106\000\107\000\107\000\107\000\107\000\000\000\107\000\
\107\000\107\000\107\000\107\000\107\000\084\000\107\000\000\000\
\107\000\107\000\107\000\107\000\107\000\000\000\107\000\107\000\
\107\000\107\000\107\000\000\000\107\000\107\000\107\000\000\000\
\000\000\107\000\107\000\107\000\107\000\107\000\107\000\000\000\
\107\000\000\000\107\000\107\000\107\000\107\000\107\000\107\000\
\107\000\107\000\107\000\107\000\107\000\000\000\107\000\000\000\
\008\000\000\000\009\000\010\000\000\000\006\000\000\000\011\000\
\000\000\000\000\107\000\107\000\107\000\080\000\080\000\080\000\
\080\000\000\000\080\000\080\000\080\000\080\000\080\000\080\000\
\087\000\080\000\000\000\080\000\080\000\080\000\080\000\080\000\
\000\000\080\000\080\000\080\000\080\000\080\000\000\000\080\000\
\080\000\080\000\000\000\000\000\080\000\080\000\080\000\080\000\
\080\000\080\000\000\000\080\000\000\000\080\000\080\000\080\000\
\080\000\080\000\080\000\080\000\080\000\013\000\080\000\080\000\
\000\000\080\000\005\000\000\000\005\000\005\000\010\000\000\000\
\000\000\005\000\000\000\000\000\000\000\080\000\080\000\080\000\
\086\000\086\000\086\000\086\000\000\000\086\000\086\000\086\000\
\086\000\086\000\086\000\085\000\086\000\000\000\086\000\086\000\
\086\000\086\000\086\000\000\000\086\000\086\000\086\000\086\000\
\086\000\000\000\086\000\086\000\086\000\000\000\000\000\086\000\
\086\000\086\000\086\000\086\000\086\000\000\000\086\000\000\000\
\086\000\086\000\086\000\086\000\086\000\086\000\086\000\005\000\
\000\000\086\000\086\000\000\000\086\000\009\000\000\000\009\000\
\009\000\008\000\000\000\000\000\009\000\000\000\000\000\000\000\
\086\000\086\000\086\000\089\000\089\000\089\000\089\000\000\000\
\089\000\089\000\089\000\089\000\089\000\089\000\088\000\089\000\
\000\000\089\000\089\000\089\000\089\000\089\000\000\000\089\000\
\089\000\089\000\089\000\089\000\000\000\089\000\089\000\089\000\
\000\000\000\000\089\000\089\000\089\000\089\000\089\000\089\000\
\000\000\089\000\000\000\089\000\089\000\089\000\089\000\089\000\
\089\000\089\000\009\000\000\000\089\000\089\000\007\000\089\000\
\007\000\007\000\000\000\000\000\000\000\007\000\000\000\000\000\
\000\000\000\000\000\000\089\000\089\000\089\000\084\000\084\000\
\084\000\084\000\000\000\084\000\084\000\084\000\084\000\084\000\
\084\000\092\000\084\000\000\000\084\000\084\000\084\000\084\000\
\084\000\000\000\084\000\084\000\084\000\084\000\084\000\000\000\
\084\000\084\000\084\000\000\000\000\000\084\000\084\000\084\000\
\084\000\084\000\084\000\000\000\084\000\000\000\084\000\084\000\
\084\000\084\000\000\000\007\000\084\000\000\000\000\000\084\000\
\084\000\000\000\084\000\006\000\000\000\006\000\006\000\000\000\
\000\000\000\000\006\000\000\000\000\000\000\000\084\000\084\000\
\084\000\087\000\087\000\087\000\087\000\000\000\087\000\087\000\
\087\000\087\000\087\000\087\000\093\000\087\000\000\000\087\000\
\087\000\087\000\087\000\087\000\000\000\087\000\087\000\087\000\
\087\000\087\000\000\000\087\000\087\000\087\000\000\000\000\000\
\087\000\087\000\087\000\087\000\087\000\087\000\000\000\087\000\
\000\000\087\000\087\000\087\000\087\000\000\000\000\000\087\000\
\006\000\000\000\087\000\087\000\010\000\087\000\010\000\010\000\
\000\000\000\000\000\000\010\000\000\000\000\000\000\000\000\000\
\000\000\087\000\087\000\087\000\085\000\085\000\085\000\085\000\
\000\000\085\000\085\000\085\000\085\000\085\000\085\000\094\000\
\085\000\000\000\085\000\085\000\085\000\085\000\085\000\000\000\
\085\000\085\000\085\000\085\000\085\000\000\000\085\000\085\000\
\085\000\000\000\000\000\085\000\085\000\085\000\085\000\085\000\
\085\000\000\000\085\000\000\000\085\000\085\000\085\000\085\000\
\000\000\010\000\085\000\000\000\000\000\085\000\085\000\008\000\
\085\000\008\000\008\000\000\000\000\000\000\000\008\000\000\000\
\000\000\000\000\000\000\000\000\085\000\085\000\085\000\088\000\
\088\000\088\000\088\000\000\000\088\000\088\000\088\000\088\000\
\088\000\088\000\095\000\088\000\000\000\088\000\088\000\088\000\
\088\000\088\000\000\000\088\000\088\000\088\000\088\000\088\000\
\000\000\088\000\088\000\088\000\000\000\000\000\088\000\088\000\
\088\000\088\000\088\000\088\000\000\000\088\000\000\000\088\000\
\088\000\088\000\088\000\000\000\008\000\088\000\000\000\000\000\
\088\000\088\000\000\000\088\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\088\000\
\088\000\088\000\092\000\092\000\092\000\092\000\000\000\092\000\
\092\000\092\000\092\000\092\000\092\000\104\000\092\000\000\000\
\092\000\092\000\092\000\092\000\092\000\000\000\092\000\092\000\
\092\000\092\000\092\000\000\000\092\000\092\000\092\000\000\000\
\029\000\030\000\031\000\032\000\000\000\092\000\092\000\000\000\
\092\000\000\000\000\000\033\000\000\000\000\000\000\000\000\000\
\092\000\000\000\000\000\092\000\092\000\000\000\092\000\034\000\
\078\000\035\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\092\000\092\000\092\000\093\000\093\000\093\000\
\093\000\000\000\093\000\093\000\093\000\093\000\093\000\093\000\
\100\000\093\000\000\000\093\000\093\000\093\000\093\000\093\000\
\000\000\093\000\093\000\093\000\093\000\093\000\000\000\093\000\
\093\000\093\000\000\000\029\000\030\000\031\000\032\000\000\000\
\093\000\093\000\000\000\093\000\000\000\000\000\033\000\000\000\
\000\000\000\000\000\000\093\000\000\000\000\000\093\000\093\000\
\000\000\093\000\034\000\000\000\035\000\000\000\067\000\000\000\
\000\000\000\000\000\000\000\000\000\000\093\000\093\000\093\000\
\094\000\094\000\094\000\094\000\000\000\094\000\094\000\094\000\
\094\000\094\000\094\000\000\000\094\000\000\000\094\000\094\000\
\094\000\094\000\094\000\000\000\094\000\094\000\094\000\094\000\
\094\000\000\000\094\000\094\000\094\000\000\000\000\000\000\000\
\000\000\000\000\000\000\094\000\094\000\000\000\094\000\113\000\
\000\000\103\000\000\000\114\000\115\000\000\000\094\000\000\000\
\000\000\094\000\094\000\000\000\094\000\000\000\120\000\121\000\
\122\000\123\000\124\000\125\000\000\000\126\000\127\000\000\000\
\094\000\094\000\094\000\095\000\095\000\095\000\095\000\000\000\
\095\000\095\000\095\000\095\000\095\000\095\000\000\000\095\000\
\000\000\095\000\095\000\095\000\095\000\095\000\000\000\095\000\
\095\000\095\000\095\000\095\000\000\000\095\000\095\000\095\000\
\063\000\000\000\000\000\000\000\000\000\000\000\095\000\095\000\
\000\000\095\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\095\000\000\000\000\000\095\000\095\000\000\000\095\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\095\000\095\000\095\000\104\000\104\000\
\104\000\104\000\000\000\104\000\104\000\104\000\104\000\104\000\
\000\000\000\000\104\000\000\000\104\000\104\000\104\000\104\000\
\104\000\000\000\104\000\104\000\104\000\104\000\104\000\000\000\
\104\000\104\000\104\000\065\000\000\000\000\000\000\000\000\000\
\000\000\104\000\104\000\000\000\104\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\104\000\000\000\000\000\104\000\
\104\000\000\000\000\000\053\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\104\000\104\000\
\104\000\100\000\100\000\100\000\100\000\000\000\100\000\100\000\
\100\000\100\000\100\000\000\000\000\000\100\000\000\000\100\000\
\100\000\100\000\100\000\100\000\112\000\100\000\100\000\100\000\
\100\000\100\000\000\000\100\000\100\000\100\000\000\000\000\000\
\000\000\000\000\000\000\000\000\100\000\100\000\000\000\100\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\100\000\
\000\000\000\000\100\000\100\000\067\000\067\000\046\000\000\000\
\000\000\067\000\000\000\067\000\000\000\067\000\000\000\067\000\
\067\000\100\000\100\000\100\000\067\000\067\000\000\000\067\000\
\000\000\067\000\000\000\067\000\067\000\067\000\067\000\067\000\
\067\000\067\000\067\000\067\000\000\000\067\000\000\000\067\000\
\067\000\038\000\000\000\067\000\067\000\000\000\067\000\067\000\
\067\000\067\000\036\000\067\000\000\000\000\000\000\000\103\000\
\103\000\000\000\000\000\000\000\103\000\000\000\103\000\000\000\
\103\000\067\000\103\000\103\000\000\000\000\000\000\000\103\000\
\103\000\000\000\103\000\000\000\103\000\000\000\103\000\103\000\
\103\000\103\000\103\000\103\000\103\000\103\000\103\000\000\000\
\103\000\039\000\103\000\103\000\000\000\000\000\103\000\103\000\
\000\000\103\000\103\000\103\000\103\000\000\000\103\000\045\000\
\000\000\063\000\063\000\063\000\063\000\000\000\063\000\063\000\
\063\000\063\000\063\000\000\000\103\000\063\000\000\000\063\000\
\063\000\063\000\063\000\063\000\000\000\063\000\063\000\063\000\
\063\000\063\000\000\000\063\000\063\000\063\000\000\000\044\000\
\000\000\000\000\000\000\000\000\063\000\000\000\000\000\063\000\
\051\000\000\000\000\000\000\000\000\000\000\000\000\000\063\000\
\000\000\000\000\063\000\063\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\063\000\063\000\063\000\065\000\065\000\065\000\065\000\
\000\000\065\000\065\000\065\000\065\000\065\000\000\000\000\000\
\065\000\000\000\065\000\065\000\065\000\065\000\065\000\000\000\
\065\000\065\000\065\000\065\000\065\000\000\000\065\000\065\000\
\065\000\053\000\053\000\053\000\053\000\000\000\000\000\065\000\
\053\000\000\000\065\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\065\000\000\000\053\000\065\000\065\000\000\000\
\000\000\053\000\000\000\000\000\000\000\000\000\000\000\053\000\
\053\000\000\000\112\000\112\000\065\000\065\000\065\000\000\000\
\000\000\112\000\000\000\112\000\000\000\112\000\112\000\000\000\
\000\000\000\000\112\000\112\000\000\000\112\000\000\000\112\000\
\000\000\112\000\000\000\000\000\000\000\000\000\053\000\000\000\
\112\000\112\000\000\000\112\000\046\000\046\000\046\000\046\000\
\000\000\000\000\000\000\046\000\000\000\000\000\112\000\112\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\046\000\
\000\000\000\000\000\000\000\000\046\000\000\000\000\000\112\000\
\000\000\000\000\046\000\046\000\000\000\000\000\046\000\038\000\
\038\000\038\000\038\000\000\000\000\000\000\000\038\000\000\000\
\036\000\000\000\036\000\036\000\000\000\000\000\000\000\036\000\
\000\000\000\000\038\000\000\000\000\000\000\000\000\000\038\000\
\000\000\046\000\000\000\036\000\000\000\038\000\038\000\000\000\
\036\000\038\000\000\000\000\000\000\000\000\000\036\000\036\000\
\000\000\000\000\036\000\000\000\000\000\000\000\000\000\039\000\
\039\000\039\000\039\000\000\000\000\000\000\000\039\000\000\000\
\000\000\000\000\000\000\000\000\038\000\045\000\045\000\045\000\
\045\000\000\000\039\000\000\000\045\000\036\000\000\000\039\000\
\000\000\000\000\000\000\000\000\000\000\039\000\039\000\145\000\
\045\000\000\000\000\000\000\000\000\000\045\000\000\000\151\000\
\000\000\000\000\000\000\045\000\045\000\044\000\044\000\044\000\
\044\000\000\000\000\000\000\000\044\000\000\000\051\000\051\000\
\051\000\051\000\000\000\000\000\039\000\051\000\000\000\000\000\
\044\000\000\000\000\000\058\000\000\000\044\000\074\000\000\000\
\000\000\051\000\045\000\044\000\044\000\000\000\051\000\000\000\
\000\000\000\000\000\000\000\000\051\000\051\000\090\000\093\000\
\000\000\000\000\096\000\097\000\000\000\099\000\101\000\105\000\
\000\000\109\000\110\000\111\000\000\000\000\000\000\000\000\000\
\000\000\000\000\044\000\207\000\134\000\000\000\000\000\000\000\
\000\000\000\000\000\000\051\000\000\000\142\000\215\000\143\000\
\217\000\000\000\000\000\000\000\000\000\000\000\134\000\224\000\
\134\000\000\000\000\000\134\000\000\000\154\000\090\000\000\000\
\159\000\134\000\134\000\000\000\000\000\134\000\000\000\000\000\
\000\000\000\000\000\000\000\000\105\000\000\000\000\000\000\000\
\000\000\000\000\000\000\134\000\134\000\176\000\177\000\178\000\
\179\000\180\000\181\000\182\000\183\000\184\000\185\000\186\000\
\187\000\188\000\189\000\190\000\191\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\248\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\001\001\000\000\000\000\000\000\208\000\
\209\000\210\000\000\000\000\000\211\000\212\000\000\000\000\000\
\000\000\000\000\006\001\218\000\220\000\000\000\105\000\000\000\
\008\001\000\000\000\000\000\000\000\000\000\000\015\001\000\000\
\000\000\040\000\041\000\042\000\043\000\000\000\000\000\000\000\
\044\000\045\000\046\000\000\000\000\000\000\000\000\000\000\000\
\047\000\000\000\000\000\048\000\000\000\049\000\000\000\000\000\
\050\000\000\000\051\000\000\000\052\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\242\000\000\000\092\000\000\000\
\000\000\000\000\000\000\053\000\054\000\000\000\000\000\055\000\
\000\000\000\000\000\000\070\001\071\001\072\001\073\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\220\000\056\000\057\000\040\000\041\000\042\000\043\000\086\001\
\087\001\000\000\044\000\045\000\046\000\000\000\007\001\000\000\
\000\000\000\000\047\000\000\000\000\000\048\000\000\000\049\000\
\000\000\000\000\050\000\100\000\051\000\000\000\052\000\000\000\
\000\000\032\001\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\032\001\053\000\054\000\000\000\
\000\000\055\000\000\000\040\000\041\000\042\000\043\000\000\000\
\000\000\104\000\044\000\045\000\046\000\000\000\000\000\000\000\
\000\000\000\000\047\000\056\000\057\000\048\000\000\000\049\000\
\000\000\000\000\050\000\000\000\051\000\000\000\052\000\000\000\
\040\000\041\000\042\000\043\000\000\000\000\000\000\000\044\000\
\045\000\046\000\000\000\000\000\000\000\053\000\054\000\047\000\
\000\000\055\000\048\000\000\000\049\000\000\000\000\000\050\000\
\000\000\051\000\000\000\052\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\056\000\057\000\000\000\000\000\000\000\
\000\000\000\000\053\000\054\000\000\000\000\000\055\000\135\000\
\135\000\135\000\135\000\000\000\000\000\135\000\000\000\000\000\
\000\000\000\000\135\000\000\000\000\000\000\000\000\000\000\000\
\056\000\057\000\000\000\000\000\000\000\000\000\135\000\135\000\
\135\000\135\000\000\000\000\000\135\000\000\000\131\000\131\000\
\131\000\131\000\135\000\135\000\131\000\000\000\135\000\000\000\
\000\000\131\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\135\000\131\000\131\000\131\000\
\131\000\000\000\112\000\131\000\000\000\000\000\000\000\000\000\
\000\000\131\000\131\000\000\000\000\000\131\000\000\000\000\000\
\166\000\113\000\000\000\000\000\000\000\114\000\115\000\116\000\
\117\000\118\000\119\000\131\000\167\000\000\000\112\000\000\000\
\120\000\121\000\122\000\123\000\124\000\125\000\000\000\126\000\
\127\000\000\000\000\000\000\000\128\000\113\000\227\000\000\000\
\000\000\114\000\115\000\116\000\117\000\118\000\119\000\000\000\
\170\000\000\000\000\000\000\000\120\000\121\000\122\000\123\000\
\124\000\125\000\000\000\126\000\127\000\112\000\000\000\000\000\
\128\000\000\000\000\000\163\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\113\000\000\000\000\000\000\000\
\114\000\115\000\116\000\117\000\118\000\119\000\112\000\000\000\
\000\000\000\000\000\000\120\000\121\000\122\000\123\000\124\000\
\125\000\165\000\126\000\127\000\000\000\113\000\000\000\128\000\
\000\000\114\000\115\000\116\000\117\000\118\000\119\000\112\000\
\000\000\000\000\000\000\000\000\120\000\121\000\122\000\123\000\
\124\000\125\000\000\000\126\000\127\000\000\000\113\000\000\000\
\128\000\000\000\114\000\115\000\116\000\117\000\118\000\119\000\
\112\000\170\000\000\000\000\000\000\000\120\000\121\000\122\000\
\123\000\124\000\125\000\000\000\126\000\127\000\000\000\113\000\
\000\000\128\000\000\000\114\000\115\000\116\000\117\000\118\000\
\119\000\112\000\167\000\000\000\000\000\000\000\120\000\121\000\
\122\000\123\000\124\000\125\000\000\000\126\000\127\000\000\000\
\113\000\227\000\128\000\000\000\114\000\115\000\116\000\117\000\
\118\000\119\000\112\000\000\000\000\000\000\000\000\000\120\000\
\121\000\122\000\123\000\124\000\125\000\000\000\126\000\127\000\
\000\000\113\000\000\000\128\000\000\000\114\000\115\000\116\000\
\117\000\118\000\119\000\244\000\112\000\000\000\000\000\000\000\
\120\000\121\000\122\000\123\000\124\000\125\000\000\000\126\000\
\127\000\000\000\000\000\113\000\128\000\000\000\000\000\114\000\
\115\000\116\000\117\000\118\000\119\000\112\000\000\000\000\000\
\002\001\000\000\120\000\121\000\122\000\123\000\124\000\125\000\
\000\000\126\000\127\000\000\000\113\000\009\001\128\000\000\000\
\114\000\115\000\116\000\117\000\118\000\119\000\112\000\000\000\
\000\000\000\000\000\000\120\000\121\000\122\000\123\000\124\000\
\125\000\000\000\126\000\127\000\000\000\113\000\000\000\128\000\
\000\000\114\000\115\000\116\000\117\000\118\000\119\000\162\000\
\000\000\000\000\000\000\000\000\120\000\121\000\122\000\123\000\
\124\000\125\000\000\000\126\000\127\000\000\000\113\000\000\000\
\128\000\000\000\114\000\115\000\116\000\117\000\118\000\119\000\
\000\000\000\000\000\000\000\000\000\000\120\000\121\000\122\000\
\123\000\124\000\125\000\000\000\126\000\127\000\000\000\000\000\
\000\000\128\000"

let yycheck = "\019\000\
\000\000\039\000\003\001\003\001\004\001\015\001\001\000\003\001\
\007\001\003\001\004\001\080\000\032\000\195\000\034\000\104\000\
\003\001\037\000\015\001\029\001\025\001\059\000\060\000\061\000\
\024\001\063\000\036\001\065\000\028\001\028\001\024\001\036\001\
\029\001\029\001\028\001\007\001\005\001\025\001\004\001\036\001\
\050\001\051\001\029\001\036\001\003\001\036\001\228\000\040\001\
\036\001\040\001\055\001\052\001\040\001\050\001\003\001\027\001\
\057\001\058\001\059\001\060\001\061\001\062\001\063\001\064\001\
\022\001\030\001\086\000\000\000\068\001\069\001\070\001\071\001\
\072\001\073\001\068\001\069\001\070\001\071\001\072\001\073\001\
\149\000\170\000\026\001\041\001\042\001\037\001\030\001\031\001\
\030\001\037\001\055\001\129\000\040\001\030\001\052\001\053\001\
\054\001\055\001\003\001\007\001\007\001\030\001\140\000\055\001\
\048\001\049\001\001\001\002\001\003\001\004\001\068\001\069\001\
\054\001\008\001\009\001\010\001\011\001\054\001\030\001\027\001\
\027\001\016\001\080\001\081\001\019\001\054\001\021\001\147\000\
\028\001\024\001\015\001\026\001\003\001\028\001\000\000\030\001\
\031\001\032\001\033\001\034\001\035\001\040\001\054\001\000\000\
\029\001\036\001\041\001\042\001\043\001\044\001\045\001\046\001\
\047\001\048\001\049\001\017\000\055\001\195\000\053\001\197\000\
\001\001\002\001\003\001\004\001\055\001\003\001\056\001\008\001\
\009\001\010\001\065\001\066\001\026\001\025\001\036\000\016\001\
\030\001\031\001\019\001\030\001\021\001\050\001\051\001\024\001\
\036\001\026\001\030\001\028\001\040\001\003\001\228\000\045\001\
\046\001\213\000\048\001\049\001\030\001\038\001\030\001\003\001\
\026\001\000\000\043\001\044\001\030\001\031\001\047\001\001\001\
\002\001\003\001\004\001\026\001\003\001\233\000\234\000\030\001\
\031\001\003\001\012\001\239\000\001\001\002\001\003\001\004\001\
\065\001\066\001\007\001\003\001\040\001\007\001\024\001\012\001\
\026\001\026\001\049\001\055\001\020\001\030\001\031\001\032\001\
\033\001\034\001\035\001\024\001\027\001\026\001\027\001\036\001\
\041\001\042\001\043\001\044\001\045\001\046\001\027\001\048\001\
\049\001\001\001\002\001\003\001\004\001\055\001\006\001\007\001\
\008\001\009\001\010\001\011\001\000\000\013\001\030\001\015\001\
\016\001\017\001\018\001\019\001\030\001\021\001\022\001\023\001\
\024\001\025\001\030\001\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\030\001\039\001\
\036\001\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\049\001\050\001\051\001\026\001\053\001\050\001\051\001\
\028\001\025\001\029\001\004\001\054\001\037\001\026\001\007\001\
\007\001\065\001\066\001\067\001\001\001\002\001\003\001\004\001\
\030\001\006\001\007\001\008\001\009\001\010\001\011\001\000\000\
\013\001\027\001\015\001\016\001\017\001\018\001\019\001\025\001\
\021\001\022\001\023\001\024\001\025\001\014\001\027\001\028\001\
\029\001\030\001\031\001\032\001\033\001\034\001\035\001\036\001\
\037\001\025\001\039\001\036\001\041\001\042\001\043\001\044\001\
\045\001\046\001\047\001\048\001\049\001\050\001\051\001\007\001\
\053\001\050\001\051\001\018\001\023\001\025\001\027\001\037\001\
\037\001\037\001\022\001\015\001\065\001\066\001\067\001\001\001\
\002\001\003\001\004\001\003\001\006\001\007\001\008\001\009\001\
\010\001\011\001\000\000\013\001\029\001\015\001\016\001\017\001\
\018\001\019\001\023\001\021\001\022\001\023\001\024\001\025\001\
\030\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\024\001\039\001\024\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\024\001\053\001\024\001\024\001\024\001\003\001\
\003\001\003\001\003\001\003\001\003\001\036\001\051\001\065\001\
\066\001\067\001\001\001\002\001\003\001\004\001\036\001\006\001\
\007\001\008\001\009\001\010\001\011\001\000\000\013\001\036\001\
\015\001\016\001\017\001\018\001\019\001\036\001\021\001\022\001\
\023\001\024\001\025\001\003\001\027\001\028\001\029\001\030\001\
\031\001\032\001\033\001\034\001\035\001\036\001\037\001\036\001\
\039\001\036\001\041\001\042\001\043\001\044\001\045\001\046\001\
\047\001\048\001\049\001\050\001\051\001\036\001\053\001\050\001\
\051\001\003\001\036\001\036\001\025\001\025\001\025\001\025\001\
\025\001\025\001\065\001\066\001\067\001\001\001\002\001\003\001\
\004\001\030\001\006\001\007\001\008\001\009\001\010\001\011\001\
\000\000\013\001\027\001\015\001\016\001\017\001\018\001\019\001\
\029\001\021\001\022\001\023\001\024\001\025\001\030\001\027\001\
\028\001\029\001\030\001\031\001\032\001\033\001\034\001\035\001\
\036\001\037\001\036\001\039\001\036\001\041\001\042\001\043\001\
\044\001\045\001\046\001\047\001\048\001\049\001\050\001\051\001\
\007\001\053\001\050\001\051\001\029\001\025\001\025\001\025\001\
\025\001\021\000\037\000\014\001\141\000\065\001\066\001\067\001\
\001\001\002\001\003\001\004\001\029\001\006\001\032\001\008\001\
\009\001\010\001\011\001\000\000\013\001\228\000\015\001\016\001\
\017\001\018\001\019\001\137\000\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\029\001\030\001\031\001\032\001\
\033\001\034\001\035\001\036\001\037\001\167\000\039\001\036\001\
\041\001\042\001\043\001\044\001\045\001\046\001\047\001\048\001\
\049\001\050\001\051\001\244\000\053\001\050\001\051\001\175\000\
\090\000\239\000\234\000\255\255\255\255\255\255\255\255\255\255\
\065\001\066\001\067\001\001\001\002\001\003\001\004\001\255\255\
\006\001\007\001\008\001\009\001\010\001\011\001\000\000\013\001\
\255\255\015\001\016\001\017\001\255\255\019\001\255\255\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\032\001\033\001\034\001\035\001\036\001\037\001\
\255\255\039\001\036\001\041\001\042\001\043\001\044\001\045\001\
\046\001\047\001\048\001\049\001\050\001\051\001\255\255\053\001\
\050\001\051\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\065\001\066\001\067\001\001\001\002\001\
\003\001\004\001\255\255\006\001\007\001\008\001\009\001\010\001\
\011\001\000\000\013\001\255\255\015\001\016\001\017\001\018\001\
\019\001\255\255\021\001\022\001\023\001\024\001\025\001\255\255\
\027\001\028\001\029\001\255\255\255\255\032\001\033\001\034\001\
\035\001\036\001\037\001\255\255\039\001\036\001\041\001\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\049\001\050\001\
\051\001\255\255\053\001\050\001\051\001\255\255\255\255\255\255\
\255\255\255\255\000\000\255\255\255\255\255\255\065\001\066\001\
\067\001\001\001\002\001\003\001\004\001\255\255\006\001\007\001\
\008\001\009\001\010\001\011\001\000\000\013\001\255\255\015\001\
\016\001\017\001\018\001\019\001\255\255\021\001\022\001\023\001\
\024\001\025\001\255\255\027\001\028\001\029\001\255\255\255\255\
\032\001\033\001\034\001\035\001\036\001\037\001\255\255\039\001\
\036\001\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\049\001\050\001\051\001\255\255\053\001\050\001\051\001\
\255\255\255\255\255\255\255\255\000\000\255\255\255\255\255\255\
\255\255\065\001\066\001\067\001\001\001\002\001\003\001\004\001\
\255\255\006\001\007\001\008\001\009\001\010\001\011\001\000\000\
\013\001\255\255\015\001\016\001\017\001\018\001\019\001\255\255\
\021\001\022\001\023\001\024\001\025\001\255\255\027\001\028\001\
\029\001\255\255\255\255\032\001\033\001\034\001\035\001\036\001\
\037\001\255\255\039\001\255\255\041\001\042\001\043\001\044\001\
\045\001\046\001\047\001\048\001\049\001\050\001\051\001\255\255\
\053\001\255\255\255\255\255\255\255\255\255\255\255\255\000\000\
\255\255\255\255\255\255\255\255\065\001\066\001\067\001\001\001\
\002\001\003\001\004\001\255\255\006\001\007\001\008\001\009\001\
\010\001\011\001\000\000\013\001\255\255\015\001\016\001\017\001\
\018\001\019\001\255\255\021\001\022\001\023\001\024\001\025\001\
\255\255\027\001\028\001\029\001\255\255\255\255\032\001\033\001\
\034\001\035\001\036\001\037\001\255\255\039\001\255\255\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\255\255\053\001\255\255\255\255\255\255\255\255\
\000\000\255\255\255\255\255\255\255\255\255\255\255\255\065\001\
\066\001\067\001\001\001\002\001\003\001\004\001\255\255\006\001\
\007\001\008\001\009\001\010\001\011\001\000\000\013\001\255\255\
\015\001\016\001\017\001\018\001\019\001\255\255\021\001\022\001\
\023\001\024\001\025\001\255\255\027\001\028\001\029\001\255\255\
\255\255\032\001\033\001\034\001\035\001\036\001\037\001\255\255\
\039\001\255\255\041\001\042\001\043\001\044\001\045\001\046\001\
\047\001\048\001\049\001\050\001\051\001\255\255\053\001\255\255\
\006\001\255\255\008\001\009\001\255\255\000\000\255\255\013\001\
\255\255\255\255\065\001\066\001\067\001\001\001\002\001\003\001\
\004\001\255\255\006\001\007\001\008\001\009\001\010\001\011\001\
\000\000\013\001\255\255\015\001\016\001\017\001\018\001\019\001\
\255\255\021\001\022\001\023\001\024\001\025\001\255\255\027\001\
\028\001\029\001\255\255\255\255\032\001\033\001\034\001\035\001\
\036\001\037\001\255\255\039\001\255\255\041\001\042\001\043\001\
\044\001\045\001\046\001\047\001\048\001\067\001\050\001\051\001\
\255\255\053\001\006\001\255\255\008\001\009\001\000\000\255\255\
\255\255\013\001\255\255\255\255\255\255\065\001\066\001\067\001\
\001\001\002\001\003\001\004\001\255\255\006\001\007\001\008\001\
\009\001\010\001\011\001\000\000\013\001\255\255\015\001\016\001\
\017\001\018\001\019\001\255\255\021\001\022\001\023\001\024\001\
\025\001\255\255\027\001\028\001\029\001\255\255\255\255\032\001\
\033\001\034\001\035\001\036\001\037\001\255\255\039\001\255\255\
\041\001\042\001\043\001\044\001\045\001\046\001\047\001\067\001\
\255\255\050\001\051\001\255\255\053\001\006\001\255\255\008\001\
\009\001\000\000\255\255\255\255\013\001\255\255\255\255\255\255\
\065\001\066\001\067\001\001\001\002\001\003\001\004\001\255\255\
\006\001\007\001\008\001\009\001\010\001\011\001\000\000\013\001\
\255\255\015\001\016\001\017\001\018\001\019\001\255\255\021\001\
\022\001\023\001\024\001\025\001\255\255\027\001\028\001\029\001\
\255\255\255\255\032\001\033\001\034\001\035\001\036\001\037\001\
\255\255\039\001\255\255\041\001\042\001\043\001\044\001\045\001\
\046\001\047\001\067\001\255\255\050\001\051\001\006\001\053\001\
\008\001\009\001\255\255\255\255\255\255\013\001\255\255\255\255\
\255\255\255\255\255\255\065\001\066\001\067\001\001\001\002\001\
\003\001\004\001\255\255\006\001\007\001\008\001\009\001\010\001\
\011\001\000\000\013\001\255\255\015\001\016\001\017\001\018\001\
\019\001\255\255\021\001\022\001\023\001\024\001\025\001\255\255\
\027\001\028\001\029\001\255\255\255\255\032\001\033\001\034\001\
\035\001\036\001\037\001\255\255\039\001\255\255\041\001\042\001\
\043\001\044\001\255\255\067\001\047\001\255\255\255\255\050\001\
\051\001\255\255\053\001\006\001\255\255\008\001\009\001\255\255\
\255\255\255\255\013\001\255\255\255\255\255\255\065\001\066\001\
\067\001\001\001\002\001\003\001\004\001\255\255\006\001\007\001\
\008\001\009\001\010\001\011\001\000\000\013\001\255\255\015\001\
\016\001\017\001\018\001\019\001\255\255\021\001\022\001\023\001\
\024\001\025\001\255\255\027\001\028\001\029\001\255\255\255\255\
\032\001\033\001\034\001\035\001\036\001\037\001\255\255\039\001\
\255\255\041\001\042\001\043\001\044\001\255\255\255\255\047\001\
\067\001\255\255\050\001\051\001\006\001\053\001\008\001\009\001\
\255\255\255\255\255\255\013\001\255\255\255\255\255\255\255\255\
\255\255\065\001\066\001\067\001\001\001\002\001\003\001\004\001\
\255\255\006\001\007\001\008\001\009\001\010\001\011\001\000\000\
\013\001\255\255\015\001\016\001\017\001\018\001\019\001\255\255\
\021\001\022\001\023\001\024\001\025\001\255\255\027\001\028\001\
\029\001\255\255\255\255\032\001\033\001\034\001\035\001\036\001\
\037\001\255\255\039\001\255\255\041\001\042\001\043\001\044\001\
\255\255\067\001\047\001\255\255\255\255\050\001\051\001\006\001\
\053\001\008\001\009\001\255\255\255\255\255\255\013\001\255\255\
\255\255\255\255\255\255\255\255\065\001\066\001\067\001\001\001\
\002\001\003\001\004\001\255\255\006\001\007\001\008\001\009\001\
\010\001\011\001\000\000\013\001\255\255\015\001\016\001\017\001\
\018\001\019\001\255\255\021\001\022\001\023\001\024\001\025\001\
\255\255\027\001\028\001\029\001\255\255\255\255\032\001\033\001\
\034\001\035\001\036\001\037\001\255\255\039\001\255\255\041\001\
\042\001\043\001\044\001\255\255\067\001\047\001\255\255\255\255\
\050\001\051\001\255\255\053\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\065\001\
\066\001\067\001\001\001\002\001\003\001\004\001\255\255\006\001\
\007\001\008\001\009\001\010\001\011\001\000\000\013\001\255\255\
\015\001\016\001\017\001\018\001\019\001\255\255\021\001\022\001\
\023\001\024\001\025\001\255\255\027\001\028\001\029\001\255\255\
\001\001\002\001\003\001\004\001\255\255\036\001\037\001\255\255\
\039\001\255\255\255\255\012\001\255\255\255\255\255\255\255\255\
\047\001\255\255\255\255\050\001\051\001\255\255\053\001\024\001\
\025\001\026\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\065\001\066\001\067\001\001\001\002\001\003\001\
\004\001\255\255\006\001\007\001\008\001\009\001\010\001\011\001\
\000\000\013\001\255\255\015\001\016\001\017\001\018\001\019\001\
\255\255\021\001\022\001\023\001\024\001\025\001\255\255\027\001\
\028\001\029\001\255\255\001\001\002\001\003\001\004\001\255\255\
\036\001\037\001\255\255\039\001\255\255\255\255\012\001\255\255\
\255\255\255\255\255\255\047\001\255\255\255\255\050\001\051\001\
\255\255\053\001\024\001\255\255\026\001\255\255\000\000\255\255\
\255\255\255\255\255\255\255\255\255\255\065\001\066\001\067\001\
\001\001\002\001\003\001\004\001\255\255\006\001\007\001\008\001\
\009\001\010\001\011\001\255\255\013\001\255\255\015\001\016\001\
\017\001\018\001\019\001\255\255\021\001\022\001\023\001\024\001\
\025\001\255\255\027\001\028\001\029\001\255\255\255\255\255\255\
\255\255\255\255\255\255\036\001\037\001\255\255\039\001\026\001\
\255\255\000\000\255\255\030\001\031\001\255\255\047\001\255\255\
\255\255\050\001\051\001\255\255\053\001\255\255\041\001\042\001\
\043\001\044\001\045\001\046\001\255\255\048\001\049\001\255\255\
\065\001\066\001\067\001\001\001\002\001\003\001\004\001\255\255\
\006\001\007\001\008\001\009\001\010\001\011\001\255\255\013\001\
\255\255\015\001\016\001\017\001\018\001\019\001\255\255\021\001\
\022\001\023\001\024\001\025\001\255\255\027\001\028\001\029\001\
\000\000\255\255\255\255\255\255\255\255\255\255\036\001\037\001\
\255\255\039\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\047\001\255\255\255\255\050\001\051\001\255\255\053\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\065\001\066\001\067\001\001\001\002\001\
\003\001\004\001\255\255\006\001\007\001\008\001\009\001\010\001\
\255\255\255\255\013\001\255\255\015\001\016\001\017\001\018\001\
\019\001\255\255\021\001\022\001\023\001\024\001\025\001\255\255\
\027\001\028\001\029\001\000\000\255\255\255\255\255\255\255\255\
\255\255\036\001\037\001\255\255\039\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\047\001\255\255\255\255\050\001\
\051\001\255\255\255\255\000\000\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\065\001\066\001\
\067\001\001\001\002\001\003\001\004\001\255\255\006\001\007\001\
\008\001\009\001\010\001\255\255\255\255\013\001\255\255\015\001\
\016\001\017\001\018\001\019\001\000\000\021\001\022\001\023\001\
\024\001\025\001\255\255\027\001\028\001\029\001\255\255\255\255\
\255\255\255\255\255\255\255\255\036\001\037\001\255\255\039\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\047\001\
\255\255\255\255\050\001\051\001\006\001\007\001\000\000\255\255\
\255\255\011\001\255\255\013\001\255\255\015\001\255\255\017\001\
\018\001\065\001\066\001\067\001\022\001\023\001\255\255\025\001\
\255\255\027\001\255\255\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\255\255\039\001\255\255\041\001\
\042\001\000\000\255\255\045\001\046\001\255\255\048\001\049\001\
\050\001\051\001\000\000\053\001\255\255\255\255\255\255\006\001\
\007\001\255\255\255\255\255\255\011\001\255\255\013\001\255\255\
\015\001\067\001\017\001\018\001\255\255\255\255\255\255\022\001\
\023\001\255\255\025\001\255\255\027\001\255\255\029\001\030\001\
\031\001\032\001\033\001\034\001\035\001\036\001\037\001\255\255\
\039\001\000\000\041\001\042\001\255\255\255\255\045\001\046\001\
\255\255\048\001\049\001\050\001\051\001\255\255\053\001\000\000\
\255\255\001\001\002\001\003\001\004\001\255\255\006\001\007\001\
\008\001\009\001\010\001\255\255\067\001\013\001\255\255\015\001\
\016\001\017\001\018\001\019\001\255\255\021\001\022\001\023\001\
\024\001\025\001\255\255\027\001\028\001\029\001\255\255\000\000\
\255\255\255\255\255\255\255\255\036\001\255\255\255\255\039\001\
\000\000\255\255\255\255\255\255\255\255\255\255\255\255\047\001\
\255\255\255\255\050\001\051\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\065\001\066\001\067\001\001\001\002\001\003\001\004\001\
\255\255\006\001\007\001\008\001\009\001\010\001\255\255\255\255\
\013\001\255\255\015\001\016\001\017\001\018\001\019\001\255\255\
\021\001\022\001\023\001\024\001\025\001\255\255\027\001\028\001\
\029\001\006\001\007\001\008\001\009\001\255\255\255\255\036\001\
\013\001\255\255\039\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\047\001\255\255\025\001\050\001\051\001\255\255\
\255\255\030\001\255\255\255\255\255\255\255\255\255\255\036\001\
\037\001\255\255\006\001\007\001\065\001\066\001\067\001\255\255\
\255\255\013\001\255\255\015\001\255\255\017\001\018\001\255\255\
\255\255\255\255\022\001\023\001\255\255\025\001\255\255\027\001\
\255\255\029\001\255\255\255\255\255\255\255\255\067\001\255\255\
\036\001\037\001\255\255\039\001\006\001\007\001\008\001\009\001\
\255\255\255\255\255\255\013\001\255\255\255\255\050\001\051\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\025\001\
\255\255\255\255\255\255\255\255\030\001\255\255\255\255\067\001\
\255\255\255\255\036\001\037\001\255\255\255\255\040\001\006\001\
\007\001\008\001\009\001\255\255\255\255\255\255\013\001\255\255\
\006\001\255\255\008\001\009\001\255\255\255\255\255\255\013\001\
\255\255\255\255\025\001\255\255\255\255\255\255\255\255\030\001\
\255\255\067\001\255\255\025\001\255\255\036\001\037\001\255\255\
\030\001\040\001\255\255\255\255\255\255\255\255\036\001\037\001\
\255\255\255\255\040\001\255\255\255\255\255\255\255\255\006\001\
\007\001\008\001\009\001\255\255\255\255\255\255\013\001\255\255\
\255\255\255\255\255\255\255\255\067\001\006\001\007\001\008\001\
\009\001\255\255\025\001\255\255\013\001\067\001\255\255\030\001\
\255\255\255\255\255\255\255\255\255\255\036\001\037\001\076\000\
\025\001\255\255\255\255\255\255\255\255\030\001\255\255\084\000\
\255\255\255\255\255\255\036\001\037\001\006\001\007\001\008\001\
\009\001\255\255\255\255\255\255\013\001\255\255\006\001\007\001\
\008\001\009\001\255\255\255\255\067\001\013\001\255\255\255\255\
\025\001\255\255\255\255\023\000\255\255\030\001\026\000\255\255\
\255\255\025\001\067\001\036\001\037\001\255\255\030\001\255\255\
\255\255\255\255\255\255\255\255\036\001\037\001\042\000\043\000\
\255\255\255\255\046\000\047\000\255\255\049\000\050\000\051\000\
\255\255\053\000\054\000\055\000\255\255\255\255\255\255\255\255\
\255\255\255\255\067\001\152\000\007\001\255\255\255\255\255\255\
\255\255\255\255\255\255\067\001\255\255\073\000\163\000\075\000\
\165\000\255\255\255\255\255\255\255\255\255\255\025\001\172\000\
\027\001\255\255\255\255\030\001\255\255\089\000\090\000\255\255\
\092\000\036\001\037\001\255\255\255\255\040\001\255\255\255\255\
\255\255\255\255\255\255\255\255\104\000\255\255\255\255\255\255\
\255\255\255\255\255\255\054\001\055\001\113\000\114\000\115\000\
\116\000\117\000\118\000\119\000\120\000\121\000\122\000\123\000\
\124\000\125\000\126\000\127\000\128\000\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\225\000\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\240\000\255\255\255\255\255\255\155\000\
\156\000\157\000\255\255\255\255\160\000\161\000\255\255\255\255\
\255\255\255\255\255\000\167\000\168\000\255\255\170\000\255\255\
\005\001\255\255\255\255\255\255\255\255\255\255\011\001\255\255\
\255\255\001\001\002\001\003\001\004\001\255\255\255\255\255\255\
\008\001\009\001\010\001\255\255\255\255\255\255\255\255\255\255\
\016\001\255\255\255\255\019\001\255\255\021\001\255\255\255\255\
\024\001\255\255\026\001\255\255\028\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\216\000\255\255\038\001\255\255\
\255\255\255\255\255\255\043\001\044\001\255\255\255\255\047\001\
\255\255\255\255\255\255\064\001\065\001\066\001\067\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\244\000\065\001\066\001\001\001\002\001\003\001\004\001\084\001\
\085\001\255\255\008\001\009\001\010\001\255\255\002\001\255\255\
\255\255\255\255\016\001\255\255\255\255\019\001\255\255\021\001\
\255\255\255\255\024\001\025\001\026\001\255\255\028\001\255\255\
\255\255\021\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\032\001\043\001\044\001\255\255\
\255\255\047\001\255\255\001\001\002\001\003\001\004\001\255\255\
\255\255\007\001\008\001\009\001\010\001\255\255\255\255\255\255\
\255\255\255\255\016\001\065\001\066\001\019\001\255\255\021\001\
\255\255\255\255\024\001\255\255\026\001\255\255\028\001\255\255\
\001\001\002\001\003\001\004\001\255\255\255\255\255\255\008\001\
\009\001\010\001\255\255\255\255\255\255\043\001\044\001\016\001\
\255\255\047\001\019\001\255\255\021\001\255\255\255\255\024\001\
\255\255\026\001\255\255\028\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\065\001\066\001\255\255\255\255\255\255\
\255\255\255\255\043\001\044\001\255\255\255\255\047\001\001\001\
\002\001\003\001\004\001\255\255\255\255\007\001\255\255\255\255\
\255\255\255\255\012\001\255\255\255\255\255\255\255\255\255\255\
\065\001\066\001\255\255\255\255\255\255\255\255\024\001\025\001\
\026\001\027\001\255\255\255\255\030\001\255\255\001\001\002\001\
\003\001\004\001\036\001\037\001\007\001\255\255\040\001\255\255\
\255\255\012\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\054\001\024\001\025\001\026\001\
\027\001\255\255\011\001\030\001\255\255\255\255\255\255\255\255\
\255\255\036\001\037\001\255\255\255\255\040\001\255\255\255\255\
\025\001\026\001\255\255\255\255\255\255\030\001\031\001\032\001\
\033\001\034\001\035\001\054\001\037\001\255\255\011\001\255\255\
\041\001\042\001\043\001\044\001\045\001\046\001\255\255\048\001\
\049\001\255\255\255\255\255\255\053\001\026\001\027\001\255\255\
\255\255\030\001\031\001\032\001\033\001\034\001\035\001\255\255\
\037\001\255\255\255\255\255\255\041\001\042\001\043\001\044\001\
\045\001\046\001\255\255\048\001\049\001\011\001\255\255\255\255\
\053\001\255\255\255\255\017\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\026\001\255\255\255\255\255\255\
\030\001\031\001\032\001\033\001\034\001\035\001\011\001\255\255\
\255\255\255\255\255\255\041\001\042\001\043\001\044\001\045\001\
\046\001\022\001\048\001\049\001\255\255\026\001\255\255\053\001\
\255\255\030\001\031\001\032\001\033\001\034\001\035\001\011\001\
\255\255\255\255\255\255\255\255\041\001\042\001\043\001\044\001\
\045\001\046\001\255\255\048\001\049\001\255\255\026\001\255\255\
\053\001\255\255\030\001\031\001\032\001\033\001\034\001\035\001\
\011\001\037\001\255\255\255\255\255\255\041\001\042\001\043\001\
\044\001\045\001\046\001\255\255\048\001\049\001\255\255\026\001\
\255\255\053\001\255\255\030\001\031\001\032\001\033\001\034\001\
\035\001\011\001\037\001\255\255\255\255\255\255\041\001\042\001\
\043\001\044\001\045\001\046\001\255\255\048\001\049\001\255\255\
\026\001\027\001\053\001\255\255\030\001\031\001\032\001\033\001\
\034\001\035\001\011\001\255\255\255\255\255\255\255\255\041\001\
\042\001\043\001\044\001\045\001\046\001\255\255\048\001\049\001\
\255\255\026\001\255\255\053\001\255\255\030\001\031\001\032\001\
\033\001\034\001\035\001\036\001\011\001\255\255\255\255\255\255\
\041\001\042\001\043\001\044\001\045\001\046\001\255\255\048\001\
\049\001\255\255\255\255\026\001\053\001\255\255\255\255\030\001\
\031\001\032\001\033\001\034\001\035\001\011\001\255\255\255\255\
\039\001\255\255\041\001\042\001\043\001\044\001\045\001\046\001\
\255\255\048\001\049\001\255\255\026\001\027\001\053\001\255\255\
\030\001\031\001\032\001\033\001\034\001\035\001\011\001\255\255\
\255\255\255\255\255\255\041\001\042\001\043\001\044\001\045\001\
\046\001\255\255\048\001\049\001\255\255\026\001\255\255\053\001\
\255\255\030\001\031\001\032\001\033\001\034\001\035\001\011\001\
\255\255\255\255\255\255\255\255\041\001\042\001\043\001\044\001\
\045\001\046\001\255\255\048\001\049\001\255\255\026\001\255\255\
\053\001\255\255\030\001\031\001\032\001\033\001\034\001\035\001\
\255\255\255\255\255\255\255\255\255\255\041\001\042\001\043\001\
\044\001\045\001\046\001\255\255\048\001\049\001\255\255\255\255\
\255\255\053\001"

let yynames_const = "\
  Import\000\
  Datatype\000\
  Vertical\000\
  Val\000\
  Var\000\
  Match\000\
  With\000\
  Underline\000\
  Model\000\
  Transition\000\
  Property\000\
  If\000\
  Then\000\
  Else\000\
  For\000\
  In\000\
  While\000\
  Do\000\
  Done\000\
  LB1\000\
  RB1\000\
  LB2\000\
  RB2\000\
  LB3\000\
  RB3\000\
  Equal\000\
  Non_Equal\000\
  LT\000\
  GT\000\
  LE\000\
  GE\000\
  Comma\000\
  Semicolon\000\
  Dot\000\
  DotDot\000\
  Arrow\000\
  EOF\000\
  Add\000\
  AddDot\000\
  Minus\000\
  MinusDot\000\
  Mult\000\
  MultDot\000\
  Negb\000\
  Ando\000\
  Oro\000\
  And\000\
  Or\000\
  Neg\000\
  LArrow\000\
  Colon\000\
  ColonColon\000\
  Init\000\
  Top\000\
  Bottom\000\
  AX\000\
  EX\000\
  AF\000\
  EG\000\
  AR\000\
  EU\000\
  True\000\
  False\000\
  Function\000\
  TLst\000\
  TFloat\000\
  TAray\000\
  TInt\000\
  TBool\000\
  TUnt\000\
  "

let yynames_block = "\
  Int\000\
  Float\000\
  Iden\000\
  UIden\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'imported) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'declars) in
    Obj.repr(
# 82 "parser_yacc.mly"
                               (!imported, symbol_tbl, None)
# 1247 "parser_yacc.ml"
               : (string list) * (Ast.psymbol_tbl) * ((Ast.pkripke_model) option)))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'imported) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'declars) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'kripke) in
    Obj.repr(
# 83 "parser_yacc.mly"
                                   (!imported, symbol_tbl, !kripke_model)
# 1256 "parser_yacc.ml"
               : (string list) * (Ast.psymbol_tbl) * ((Ast.pkripke_model) option)))
; (fun __caml_parser_env ->
    Obj.repr(
# 86 "parser_yacc.mly"
            ()
# 1262 "parser_yacc.ml"
               : 'imported))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'imported) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 87 "parser_yacc.mly"
                            (imported := _3 :: !imported)
# 1270 "parser_yacc.ml"
               : 'imported))
; (fun __caml_parser_env ->
    Obj.repr(
# 91 "parser_yacc.mly"
            ()
# 1276 "parser_yacc.ml"
               : 'declars))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'declars) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'type_args) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 93 "parser_yacc.mly"
                                                 (
        Hashtbl.add symbol_tbl id (UDT, PTyp (erase_type_args _6 _4)); 
        print_endline ("declared udt "^id))
# 1288 "parser_yacc.ml"
               : 'declars))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'declars) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'expr_single) in
    Obj.repr(
# 96 "parser_yacc.mly"
                                          (
            Hashtbl.add symbol_tbl _3 (Var, PExpr_loc (PTVar (new_type_var ()), _5))
        )
# 1299 "parser_yacc.ml"
               : 'declars))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'declars) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'type_of_expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr_single) in
    Obj.repr(
# 99 "parser_yacc.mly"
                                                       (
            Hashtbl.add symbol_tbl _3 (Var, PExpr_loc (_4, _6))
        )
# 1311 "parser_yacc.ml"
               : 'declars))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'declars) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'expr_single) in
    Obj.repr(
# 102 "parser_yacc.mly"
                                          (
            Hashtbl.add symbol_tbl _3 (Val, PExpr_loc (PTVar (new_type_var ()), _5))
        )
# 1322 "parser_yacc.ml"
               : 'declars))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'declars) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'type_of_expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr_single) in
    Obj.repr(
# 105 "parser_yacc.mly"
                                                       (
            Hashtbl.add symbol_tbl _3 (Val, PExpr_loc (_4, _6))
        )
# 1334 "parser_yacc.ml"
               : 'declars))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'declars) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'args) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 108 "parser_yacc.mly"
                                             (
          Hashtbl.add symbol_tbl _3 (Function, PFunction(PTVar (new_type_var ()), _4, _6))
        )
# 1346 "parser_yacc.ml"
               : 'declars))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'declars) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'args) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'type_of_expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 111 "parser_yacc.mly"
                                                          (
        Hashtbl.add symbol_tbl _3 (Function, PFunction(_5, _4, _7)))
# 1358 "parser_yacc.ml"
               : 'declars))
; (fun __caml_parser_env ->
    Obj.repr(
# 115 "parser_yacc.mly"
           ()
# 1364 "parser_yacc.ml"
               : 'type_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'type_args) in
    Obj.repr(
# 116 "parser_yacc.mly"
                   (_1 :: _2)
# 1372 "parser_yacc.ml"
               : 'type_args))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 119 "parser_yacc.mly"
                        (_2)
# 1379 "parser_yacc.ml"
               : 'type_of_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'pattern) in
    Obj.repr(
# 122 "parser_yacc.mly"
              ([_1])
# 1386 "parser_yacc.ml"
               : 'args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'pattern) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'args) in
    Obj.repr(
# 123 "parser_yacc.mly"
                    (_1 :: _2)
# 1394 "parser_yacc.ml"
               : 'args))
; (fun __caml_parser_env ->
    let _5 = (Parsing.peek_val __caml_parser_env 8 : 'expr) in
    let _8 = (Parsing.peek_val __caml_parser_env 5 : 'pattern) in
    let _10 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _12 = (Parsing.peek_val __caml_parser_env 1 : 'list_property) in
    Obj.repr(
# 126 "parser_yacc.mly"
                                                                                                         (
        kripke_model := Some {
            init = _5;
            transition = (_8, _10);
            properties = _12;
        }
    )
# 1410 "parser_yacc.ml"
               : 'kripke))
; (fun __caml_parser_env ->
    Obj.repr(
# 135 "parser_yacc.mly"
               ([])
# 1416 "parser_yacc.ml"
               : 'list_property))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'property) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'list_property) in
    Obj.repr(
# 136 "parser_yacc.mly"
                           (_1::_2)
# 1424 "parser_yacc.ml"
               : 'list_property))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'formula) in
    Obj.repr(
# 139 "parser_yacc.mly"
                                       ((_2, _4))
# 1432 "parser_yacc.ml"
               : 'property))
; (fun __caml_parser_env ->
    Obj.repr(
# 142 "parser_yacc.mly"
             (mk_pformula_loc PTop (rhs_start_pos 1) (rhs_end_pos 1))
# 1438 "parser_yacc.ml"
               : 'formula))
; (fun __caml_parser_env ->
    Obj.repr(
# 143 "parser_yacc.mly"
             (mk_pformula_loc PBottom (rhs_start_pos 1) (rhs_end_pos 1))
# 1444 "parser_yacc.ml"
               : 'formula))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'list_expr) in
    Obj.repr(
# 144 "parser_yacc.mly"
                     (mk_pformula_loc (PAtomic (_1, _2)) (rhs_start_pos 1) (rhs_end_pos 2))
# 1452 "parser_yacc.ml"
               : 'formula))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'formula) in
    Obj.repr(
# 145 "parser_yacc.mly"
                    (mk_pformula_loc (PNeg _2) (rhs_start_pos 1) (rhs_end_pos 2))
# 1459 "parser_yacc.ml"
               : 'formula))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'formula) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'formula) in
    Obj.repr(
# 146 "parser_yacc.mly"
                            (mk_pformula_loc (PAnd (_1, _3)) (rhs_start_pos 1) (rhs_end_pos 3))
# 1467 "parser_yacc.ml"
               : 'formula))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'formula) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'formula) in
    Obj.repr(
# 147 "parser_yacc.mly"
                            (mk_pformula_loc (POr (_1, _3)) (rhs_start_pos 1) (rhs_end_pos 3))
# 1475 "parser_yacc.ml"
               : 'formula))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'formula) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 148 "parser_yacc.mly"
                                               (mk_pformula_loc (PAX (_3, _5, _7)) (rhs_start_pos 1) (rhs_end_pos 8))
# 1484 "parser_yacc.ml"
               : 'formula))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'formula) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 149 "parser_yacc.mly"
                                               (mk_pformula_loc (PEX (_3, _5, _7)) (rhs_start_pos 1) (rhs_end_pos 8))
# 1493 "parser_yacc.ml"
               : 'formula))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'formula) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 150 "parser_yacc.mly"
                                               (mk_pformula_loc (PAF (_3, _5, _7)) (rhs_start_pos 1) (rhs_end_pos 8))
# 1502 "parser_yacc.ml"
               : 'formula))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'formula) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 151 "parser_yacc.mly"
                                               (mk_pformula_loc (PEG (_3, _5, _7)) (rhs_start_pos 1) (rhs_end_pos 8))
# 1511 "parser_yacc.ml"
               : 'formula))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 9 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _7 = (Parsing.peek_val __caml_parser_env 5 : 'formula) in
    let _9 = (Parsing.peek_val __caml_parser_env 3 : 'formula) in
    let _11 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 152 "parser_yacc.mly"
                                                                        (mk_pformula_loc (PAR (_3, _5, _7, _9, _11)) (rhs_start_pos 1) (rhs_end_pos 12))
# 1522 "parser_yacc.ml"
               : 'formula))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 9 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _7 = (Parsing.peek_val __caml_parser_env 5 : 'formula) in
    let _9 = (Parsing.peek_val __caml_parser_env 3 : 'formula) in
    let _11 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 153 "parser_yacc.mly"
                                                                        (mk_pformula_loc (PEU (_3, _5, _7, _9, _11)) (rhs_start_pos 1) (rhs_end_pos 12))
# 1533 "parser_yacc.ml"
               : 'formula))
; (fun __caml_parser_env ->
    Obj.repr(
# 163 "parser_yacc.mly"
           ([])
# 1539 "parser_yacc.ml"
               : 'list_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr_single) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'list_expr) in
    Obj.repr(
# 164 "parser_yacc.mly"
                          (_1::_2)
# 1547 "parser_yacc.ml"
               : 'list_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'constr) in
    Obj.repr(
# 167 "parser_yacc.mly"
                ([_1])
# 1554 "parser_yacc.ml"
               : 'constrs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'constr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'constrs) in
    Obj.repr(
# 168 "parser_yacc.mly"
                              (_1 :: _3)
# 1562 "parser_yacc.ml"
               : 'constrs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 173 "parser_yacc.mly"
              (print_endline ("found constr "^_1); (_1, None))
# 1569 "parser_yacc.ml"
               : 'constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 174 "parser_yacc.mly"
                ((_1, Some _2))
# 1577 "parser_yacc.ml"
               : 'constr))
; (fun __caml_parser_env ->
    Obj.repr(
# 177 "parser_yacc.mly"
          (PTInt)
# 1583 "parser_yacc.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 178 "parser_yacc.mly"
            (PTBool)
# 1589 "parser_yacc.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 179 "parser_yacc.mly"
             (PTFloat)
# 1595 "parser_yacc.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 180 "parser_yacc.mly"
            (PTUnt)
# 1601 "parser_yacc.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 181 "parser_yacc.mly"
                (PTAray (_2))
# 1608 "parser_yacc.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 182 "parser_yacc.mly"
               (PTLst (_2))
# 1615 "parser_yacc.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 183 "parser_yacc.mly"
           (PTUdt (_1, []))
# 1622 "parser_yacc.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'udt_args) in
    Obj.repr(
# 184 "parser_yacc.mly"
                    (PTUdt (_1, _2))
# 1630 "parser_yacc.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'constrs) in
    Obj.repr(
# 185 "parser_yacc.mly"
              (PTConstrs _1)
# 1637 "parser_yacc.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'tuple_typ) in
    Obj.repr(
# 186 "parser_yacc.mly"
                        (PTTuple _2)
# 1644 "parser_yacc.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'record_typ) in
    Obj.repr(
# 187 "parser_yacc.mly"
                 (PTRecord _1)
# 1651 "parser_yacc.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 188 "parser_yacc.mly"
                    (PTArrow (_1, _3))
# 1659 "parser_yacc.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    Obj.repr(
# 189 "parser_yacc.mly"
                    (_2)
# 1666 "parser_yacc.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 192 "parser_yacc.mly"
              ([_1])
# 1673 "parser_yacc.ml"
               : 'udt_args))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'comma_udt_args) in
    Obj.repr(
# 193 "parser_yacc.mly"
                           (_2)
# 1680 "parser_yacc.ml"
               : 'udt_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 196 "parser_yacc.mly"
                              ([_1;_3])
# 1688 "parser_yacc.ml"
               : 'comma_udt_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'comma_udt_args) in
    Obj.repr(
# 197 "parser_yacc.mly"
                             (_1::_3)
# 1696 "parser_yacc.ml"
               : 'comma_udt_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 204 "parser_yacc.mly"
                         ([_1; _3])
# 1704 "parser_yacc.ml"
               : 'tuple_typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'tuple_typ) in
    Obj.repr(
# 205 "parser_yacc.mly"
                          (_1 :: _3)
# 1712 "parser_yacc.ml"
               : 'tuple_typ))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'str_typs) in
    Obj.repr(
# 208 "parser_yacc.mly"
                             (str_pts)
# 1719 "parser_yacc.ml"
               : 'record_typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'str_typ) in
    Obj.repr(
# 211 "parser_yacc.mly"
                  ([_1])
# 1726 "parser_yacc.ml"
               : 'str_typs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'str_typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'str_typs) in
    Obj.repr(
# 212 "parser_yacc.mly"
                     (_1::_2)
# 1734 "parser_yacc.ml"
               : 'str_typs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    Obj.repr(
# 215 "parser_yacc.mly"
                                  ((_1, _3))
# 1742 "parser_yacc.ml"
               : 'str_typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr_single) in
    Obj.repr(
# 219 "parser_yacc.mly"
                  (_1)
# 1749 "parser_yacc.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr_seq) in
    Obj.repr(
# 220 "parser_yacc.mly"
                 (
            mk_pexpr_loc (PSeq (_1)) (PTVar (new_type_var())) (rhs_start_pos 1) (rhs_end_pos 1)
        )
# 1758 "parser_yacc.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr_single) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr_single) in
    Obj.repr(
# 225 "parser_yacc.mly"
                                            (_1; _3)
# 1766 "parser_yacc.ml"
               : 'expr_seq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr_single) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr_seq) in
    Obj.repr(
# 226 "parser_yacc.mly"
                                    (_1 :: _3)
# 1774 "parser_yacc.ml"
               : 'expr_seq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 229 "parser_yacc.mly"
                  (mk_pexpr_loc (PSymbol _1) (PTVar (new_type_var ())) (rhs_start_pos 1) (rhs_end_pos 1))
# 1781 "parser_yacc.ml"
               : 'expr_single))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr_single) in
    Obj.repr(
# 230 "parser_yacc.mly"
                               (
            let nt = PTVar (new_type_var ()) in
            mk_pexpr_loc (PDot (mk_pexpr_loc (PSymbol _1) nt (rhs_start_pos 1) (rhs_end_pos 1), _3)) nt (rhs_start_pos 1) (rhs_end_pos 3)
        )
# 1792 "parser_yacc.ml"
               : 'expr_single))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr_single) in
    Obj.repr(
# 234 "parser_yacc.mly"
                            (
            mk_pexpr_loc (PDot (mk_pexpr_loc (PSymbol _1) e.ptyp (rhs_start_pos 1) (rhs_end_pos 1), _3)) _3.ptyp (rhs_start_pos 1) (rhs_end_pos 3)
        )
# 1802 "parser_yacc.ml"
               : 'expr_single))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 237 "parser_yacc.mly"
            (mk_pexpr_loc (PInt _1) (PTInt) (rhs_start_pos 1) (rhs_end_pos 1))
# 1809 "parser_yacc.ml"
               : 'expr_single))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 238 "parser_yacc.mly"
            (mk_pexpr_loc (PFloat _1) (PTFloat) (rhs_start_pos 1) (rhs_end_pos 1))
# 1816 "parser_yacc.ml"
               : 'expr_single))
; (fun __caml_parser_env ->
    Obj.repr(
# 239 "parser_yacc.mly"
                (mk_pexpr_loc PUnt (PTUnt) (rhs_start_pos 1) (rhs_end_pos 2))
# 1822 "parser_yacc.ml"
               : 'expr_single))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr_single_list) in
    Obj.repr(
# 240 "parser_yacc.mly"
                                                   (
            let ea = _3 in
            if List.length ea = 0 then
                mk_pexpr_loc (PAray ea) (PTAray (PTVar (new_type_var ()))) (rhs_start_pos 1) (rhs_end_pos 5)
            else begin
                let e0 = List.hd ea in
                mk_pexpr_loc (PAray ea) (PTAray e0.ptyp) (rhs_start_pos 1) (rhs_end_pos 5)
                (*match e0.ptyp with
                | None -> mk_pexpr_loc (PAray ea) None (rhs_start_pos 1) (rhs_end_pos 5)
                | Some t -> mk_pexpr_loc (PAray ea) (Some (PTAray (Some t))) (rhs_start_pos 1) (rhs_end_pos 5) *)
            end 
        )
# 1840 "parser_yacc.ml"
               : 'expr_single))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr_single_list) in
    Obj.repr(
# 252 "parser_yacc.mly"
                                  (
            if List.length _2 = 0 then
                mk_pexpr_loc (PLst _2) (PTLst (PTVar (new_type_var ()))) (rhs_start_pos 1) (rhs_end_pos 3)
            else begin
                let e0 = List.hd _2 in
                mk_pexpr_loc (PLst _2) (PTLst e0.ptyp) (rhs_start_pos 1) (rhs_end_pos 3)
                (*match e0.ptyp with
                | None -> mk_pexpr_loc (PLst el) None (rhs_start_pos 1) (rhs_end_pos 3)
                | Some t -> mk_pexpr_loc (PLst el) (Some (PTLst (Some t))) (rhs_start_pos 1) (rhs_end_pos 3)*)
            end
        )
# 1857 "parser_yacc.ml"
               : 'expr_single))
; (fun __caml_parser_env ->
    Obj.repr(
# 263 "parser_yacc.mly"
            (mk_pexpr_loc (PBool true) (PTBool) (rhs_start_pos 1) (rhs_end_pos 1))
# 1863 "parser_yacc.ml"
               : 'expr_single))
; (fun __caml_parser_env ->
    Obj.repr(
# 264 "parser_yacc.mly"
            (mk_pexpr_loc (PBool false) (PTBool) (rhs_start_pos 1) (rhs_end_pos 1))
# 1869 "parser_yacc.ml"
               : 'expr_single))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'nonempty_single_expr_list_comma) in
    Obj.repr(
# 265 "parser_yacc.mly"
                                                         (
            let elt = List.map (fun (e:pexpr_loc) -> e.ptyp) (_2::_4) in
            mk_pexpr_loc (PTuple (_2::_4)) ((PTTuple elt)) (rhs_start_pos 1) (rhs_end_pos 5)
        )
# 1880 "parser_yacc.ml"
               : 'expr_single))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'str_expr_list) in
    Obj.repr(
# 269 "parser_yacc.mly"
                            (
            let str_elt = List.map (fun (str, (pel:pexpr_loc)) -> (str, pel.ptyp)) _2 in
            mk_pexpr_loc (PRecord _2) (PTRecord str_elt) (rhs_start_pos 1) (rhs_end_pos 3)
        )
# 1890 "parser_yacc.ml"
               : 'expr_single))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr_single) in
    Obj.repr(
# 273 "parser_yacc.mly"
                           (
            mk_pexpr_loc (PNegb _2) (PTBool) (rhs_start_pos 1) (rhs_end_pos 2)
            (*match e.ptyp with
            | None | Some PTBool -> 
                e.ptyp <- Some PTBool; 
                mk_pexpr_loc (PNegb e) (Some PTBool) (rhs_start_pos 1) $endpos(e)
            | Some t -> raise (Type_mismatch (e, t, PTBool))*)
        )
# 1904 "parser_yacc.ml"
               : 'expr_single))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr_single) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr_single) in
    Obj.repr(
# 281 "parser_yacc.mly"
                                    (
            mk_pexpr_loc (PAndo (_1, _3)) (PTBool) (rhs_start_pos 1) (rhs_end_pos 3)
            (*match e1.ptyp, e2.ptyp with
            | None, None | None, Some PTBool | Some PTBool, None | Some PTBool, Some PTBool ->
                e1.ptyp <- Some PTBool;
                e2.ptyp <- Some PTBool;
                mk_pexpr_loc (PAndo (e1, e2)) (Some PTBool) $startpos(e1) $endpos(e2)
            | Some t, None -> raise (Type_mismatch (e1, t, PTBool)) 
            | Some t, Some PTBool -> raise (Type_mismatch (e1, t, PTBool))
            | None, Some t -> raise (Type_mismatch (e2, t, PTBool))
            | Some PTBool, Some t -> raise (Type_mismatch (e2, t, PTBool))
            | Some t1, Some t2 -> raise (Type_mismatch (e1, t1, PTBool))*)
        )
# 1924 "parser_yacc.ml"
               : 'expr_single))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr_single) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr_single) in
    Obj.repr(
# 294 "parser_yacc.mly"
                                   (
            mk_pexpr_loc (POro (_1, _3)) (PTBool) (rhs_start_pos 1) (rhs_end_pos 3)
            (*match e1.ptyp, e2.ptyp with
            | None, None | None, Some PTBool | Some PTBool, None | Some PTBool, Some PTBool ->
                e1.ptyp <- Some PTBool;
                e2.ptyp <- Some PTBool;
                mk_pexpr_loc (POro (e1, e2)) (Some PTBool) $startpos(e1) $endpos(e2)
            | Some t, None -> raise (Type_mismatch (e1, t, PTBool)) 
            | Some t, Some PTBool -> raise ((Type_mismatch (e1, t, PTBool)))
            | None, Some t -> raise (Type_mismatch (e2, t, PTBool))
            | Some PTBool, Some t -> raise (Type_mismatch (e2, t, PTBool))
            | Some t1, Some t2 -> raise (Type_mismatch (e1, t1, PTBool))*)
        )
# 1944 "parser_yacc.ml"
               : 'expr_single))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr_single) in
    Obj.repr(
# 307 "parser_yacc.mly"
                                   (
            mk_pexpr_loc (PNegi 2) (PTInt) (rhs_start_pos 1) (rhs_end_pos 2)
            (*match e.ptyp with
            | None | Some PTInt ->
                e.ptyp <- Some PTInt;
                mk_pexpr_loc (PNegi e) (Some PTInt) (rhs_start_pos 1) $endpos(e)
            | Some t -> raise (Type_mismatch (e, t, PTInt))*)
        )
# 1958 "parser_yacc.ml"
               : 'expr_single))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr_single) in
    Obj.repr(
# 315 "parser_yacc.mly"
                                      (
            mk_pexpr_loc (PNegf _2) PTFloat (rhs_start_pos 1) (rhs_end_pos 2)
        )
# 1967 "parser_yacc.ml"
               : 'expr_single))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr_single) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr_single) in
    Obj.repr(
# 318 "parser_yacc.mly"
                                  (
            mk_pexpr_loc (PAdd (_1, _3)) (PTInt) (rhs_start_pos 1) (rhs_end_pos 3)
            (*match e1.ptyp, e2.ptyp with
            | None, None | None, Some PTInt | Some PTInt, None | Some PTInt, Some PTInt ->
                e1.ptyp <- Some PTInt;
                e2.ptyp <- Some PTInt;
                mk_pexpr_loc (PAdd (e1, e2)) (Some PTInt) $startpos(e1) $endpos(e2)
            | Some t, None -> raise (Type_mismatch (e1, t, PTInt)) 
            | Some t, Some PTInt -> raise (Type_mismatch (e1, t, PTInt))
            | None, Some t -> raise (Type_mismatch (e2, t, PTInt))
            | Some PTInt, Some t -> raise (Type_mismatch (e2, t, PTInt))
            | Some t1, Some t2 -> raise (Type_mismatch (e1, t1, PTInt))*)
        )
# 1987 "parser_yacc.ml"
               : 'expr_single))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr_single) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr_single) in
    Obj.repr(
# 331 "parser_yacc.mly"
                                    (
            mk_pexpr_loc (PMinus (_1, _3)) (PTInt) (rhs_start_pos 1) (rhs_end_pos 3)
            (*match e1.ptyp, e2.ptyp with
            | None, None | None, Some PTInt | Some PTInt, None | Some PTInt, Some PTInt ->
                e1.ptyp <- Some PTInt;
                e2.ptyp <- Some PTInt;
                mk_pexpr_loc (PMinus (e1, e2)) (Some PTInt) $startpos(e1) $endpos(e2)
            | Some t, None -> raise (Type_mismatch (e1, t, PTInt)) 
            | Some t, Some PTInt -> raise (Type_mismatch (e1, t, PTInt))
            | None, Some t -> raise (Type_mismatch (e2, t, PTInt))
            | Some PTInt, Some t -> raise (Type_mismatch (e2, t, PTInt))
            | Some t1, Some t2 -> raise (Type_mismatch (e1, t1, PTInt))*)
        )
# 2007 "parser_yacc.ml"
               : 'expr_single))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr_single) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr_single) in
    Obj.repr(
# 344 "parser_yacc.mly"
                                   (
            mk_pexpr_loc (PMult (_1, _3)) (PTInt) (rhs_start_pos 1) (rhs_end_pos 3)
            (*match e1.ptyp, e2.ptyp with
            | None, None | None, Some PTInt | Some PTInt, None | Some PTInt, Some PTInt ->
                e1.ptyp <- Some PTInt;
                e2.ptyp <- Some PTInt;
                mk_pexpr_loc (PMult (e1, e2)) (Some PTInt) $startpos(e1) $endpos(e2)
            | Some t, None -> raise (Type_mismatch (e1, t, PTInt)) 
            | Some t, Some PTInt -> raise (Type_mismatch (e1, t, PTInt))
            | None, Some t -> raise (Type_mismatch (e2, t, PTInt))
            | Some PTInt, Some t -> raise (Type_mismatch (e2, t, PTInt))
            | Some t1, Some t2 -> raise (Type_mismatch (e1, t1, PTInt))*)
        )
# 2027 "parser_yacc.ml"
               : 'expr_single))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr_single) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr_single) in
    Obj.repr(
# 357 "parser_yacc.mly"
                                     (
            mk_pexpr_loc (PAddDot (_1, _3)) (PTFloat) (rhs_start_pos 1) (rhs_end_pos 3)
            (*match e1.ptyp, e2.ptyp with
            | None, None | None, Some PTFloat | Some PTFloat, None | Some PTFloat, Some PTFloat ->
                e1.ptyp <- Some PTFloat;
                e2.ptyp <- Some PTFloat;
                mk_pexpr_loc (PAddDot (e1, e2)) (Some PTFloat) $startpos(e1) $endpos(e2)
            | Some t, None -> raise (Type_mismatch (e1, t, PTFloat))
            | Some t, Some PTFloat -> raise (Type_mismatch (e1, t, PTFloat))
            | None, Some t -> raise (Type_mismatch (e2, t, PTFloat))
            | Some PTFloat, Some t -> raise (Type_mismatch (e2, t, PTFloat))
            | Some t1, Some t2 -> raise (Type_mismatch (e1, t1, PTFloat))*)
        )
# 2047 "parser_yacc.ml"
               : 'expr_single))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr_single) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr_single) in
    Obj.repr(
# 370 "parser_yacc.mly"
                                       (
            mk_pexpr_loc (PMinusDot (_1, _3)) (PTFloat) (rhs_start_pos 1) (rhs_end_pos 3)
            (*match e1.ptyp, e2.ptyp with
            | None, None | None, Some PTFloat | Some PTFloat, None | Some PTFloat, Some PTFloat ->
                e1.ptyp <- Some PTFloat;
                e2.ptyp <- Some PTFloat;
                mk_pexpr_loc (PMinusDot (e1, e2)) (Some PTFloat) $startpos(e1) $endpos(e2)
            | Some t, None -> raise (Type_mismatch (e1, t, PTFloat)) 
            | Some t, Some PTFloat -> raise (Type_mismatch (e1, t, PTFloat))
            | None, Some t -> raise (Type_mismatch (e2, t, PTFloat))
            | Some PTFloat, Some t -> raise (Type_mismatch (e2, t, PTFloat))
            | Some t1, Some t2 -> raise (Type_mismatch (e1, t1, PTFloat))*)
        )
# 2067 "parser_yacc.ml"
               : 'expr_single))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr_single) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr_single) in
    Obj.repr(
# 383 "parser_yacc.mly"
                                      (
            mk_pexpr_loc (PMultDot (_1, _3)) (PTFloat) (rhs_start_pos 1) (rhs_end_pos 3)
            (*match e1.ptyp, e2.ptyp with
            | None, None | None, Some PTFloat | Some PTFloat, None | Some PTFloat, Some PTFloat ->
                e1.ptyp <- Some PTFloat;
                e2.ptyp <- Some PTFloat;
                mk_pexpr_loc (PMultDot (e1, e2)) (Some PTFloat) $startpos(e1) $endpos(e2)
            | Some t, None -> raise (Type_mismatch (e1, t, PTFloat))
            | Some t, Some PTFloat -> raise (Type_mismatch (e1, t, PTFloat))
            | None, Some t -> raise (Type_mismatch (e2, t, PTFloat))
            | Some PTFloat, Some t -> raise (Type_mismatch (e2, t, PTFloat))
            | Some t1, Some t2 -> raise (Type_mismatch (e1, t1, PTFloat))*)
        )
# 2087 "parser_yacc.ml"
               : 'expr_single))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr_single) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr_single) in
    Obj.repr(
# 396 "parser_yacc.mly"
                                    (mk_pexpr_loc (PEqual (_1, _3)) (PTBool) (rhs_start_pos 1) (rhs_end_pos 3))
# 2095 "parser_yacc.ml"
               : 'expr_single))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr_single) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr_single) in
    Obj.repr(
# 397 "parser_yacc.mly"
                                        (mk_pexpr_loc (PNon_Equal (_1, _3)) (PTBool) (rhs_start_pos 1) (rhs_end_pos 3))
# 2103 "parser_yacc.ml"
               : 'expr_single))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr_single) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr_single) in
    Obj.repr(
# 398 "parser_yacc.mly"
                                    (mk_pexpr_loc (PLT (_1, _3)) (PTBool) (rhs_start_pos 1) (rhs_end_pos 3))
# 2111 "parser_yacc.ml"
               : 'expr_single))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr_single) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr_single) in
    Obj.repr(
# 399 "parser_yacc.mly"
                                    (mk_pexpr_loc (PGT (_1, _3)) (PTBool) (rhs_start_pos 1) (rhs_end_pos 3))
# 2119 "parser_yacc.ml"
               : 'expr_single))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr_single) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr_single) in
    Obj.repr(
# 400 "parser_yacc.mly"
                                    (mk_pexpr_loc (PLE (_1, _3)) (PTBool) (rhs_start_pos 1) (rhs_end_pos 3))
# 2127 "parser_yacc.ml"
               : 'expr_single))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr_single) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr_single) in
    Obj.repr(
# 401 "parser_yacc.mly"
                                    (mk_pexpr_loc (PGE (_1, _3)) (PTBool) (rhs_start_pos 1) (rhs_end_pos 3))
# 2135 "parser_yacc.ml"
               : 'expr_single))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'expr_single) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 402 "parser_yacc.mly"
                                 (
            mk_pexpr_loc (PIF (_2, _4, None)) PTUnt (rhs_start_pos 1) (rhs_end_pos 4)
        )
# 2145 "parser_yacc.ml"
               : 'expr_single))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expr_single) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'else_expr) in
    Obj.repr(
# 405 "parser_yacc.mly"
                                           (
            mk_pexpr_loc (PIF (_2, _4, Some _5)) _4.ptyp (rhs_start_pos 1) (rhs_end_pos 5)
        )
# 2156 "parser_yacc.ml"
               : 'expr_single))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expr_single) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 408 "parser_yacc.mly"
                                     (
            mk_pexpr_loc (PWhile (_2, _4)) (PTUnt) (rhs_start_pos 1) (rhs_end_pos 5)
        )
# 2166 "parser_yacc.ml"
               : 'expr_single))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 9 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 6 : 'expr_single) in
    let _7 = (Parsing.peek_val __caml_parser_env 4 : 'expr_single) in
    let _10 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 411 "parser_yacc.mly"
                                                                      (
            mk_pexpr_loc (PFor (_2, _5, _7, _10)) (PTUnt) (rhs_start_pos 1) (rhs_end_pos 11)
        )
# 2178 "parser_yacc.ml"
               : 'expr_single))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr_single) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr_single) in
    Obj.repr(
# 416 "parser_yacc.mly"
                                        (mk_pexpr_loc (PAssign (_1, _3)) (PTUnt) (rhs_start_pos 1) (rhs_end_pos 3))
# 2186 "parser_yacc.ml"
               : 'expr_single))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'expr_single) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'pattern_expr_list) in
    Obj.repr(
# 417 "parser_yacc.mly"
                                               (mk_pexpr_loc (PMatch (_2, _4)) (PTVar (new_type_var ())) (rhs_start_pos 1) (rhs_end_pos 4))
# 2194 "parser_yacc.ml"
               : 'expr_single))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'expr_single) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'str_expr_list) in
    Obj.repr(
# 418 "parser_yacc.mly"
                                                (mk_pexpr_loc (PWith (_1, _4)) e1.ptyp (rhs_start_pos 1) (rhs_end_pos 5))
# 2202 "parser_yacc.ml"
               : 'expr_single))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 419 "parser_yacc.mly"
            (mk_pexpr_loc (PConstr ((PConstr_basic _1))) (PTVar (new_type_var ())) (rhs_start_pos 1) (rhs_end_pos 1))
# 2209 "parser_yacc.ml"
               : 'expr_single))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr_single) in
    Obj.repr(
# 420 "parser_yacc.mly"
                        (
            mk_pexpr_loc (PConstr ((PConstr_compound (_1, _2)))) (PTVar (new_type_var ())) (rhs_start_pos 1) (rhs_end_pos 2)
        )
# 2219 "parser_yacc.ml"
               : 'expr_single))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'nonempty_single_expr_list) in
    Obj.repr(
# 423 "parser_yacc.mly"
                                     (
            mk_pexpr_loc (PApply (_1, _2)) (PTVar (new_type_var ())) (rhs_start_pos 1) (rhs_end_pos 2)
        )
# 2229 "parser_yacc.ml"
               : 'expr_single))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr_single) in
    Obj.repr(
# 426 "parser_yacc.mly"
                                   (mk_pexpr_loc (PLocal_Val (_2, _4)) (PTUnt) (rhs_start_pos 1) (rhs_end_pos 4))
# 2237 "parser_yacc.ml"
               : 'expr_single))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr_single) in
    Obj.repr(
# 427 "parser_yacc.mly"
                                   (mk_pexpr_loc (PLocal_Var (_2, _4)) (PTUnt) (rhs_start_pos 1) (rhs_end_pos 4))
# 2245 "parser_yacc.ml"
               : 'expr_single))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'expr_single) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr_single) in
    Obj.repr(
# 428 "parser_yacc.mly"
                                      (
        let e:Ast.pexpr_loc = _1 in
        let et1 = e.ptyp in
        match et1 with
        | PTAray pt -> mk_pexpr_loc (PAray_Field (_1, _3)) pt (rhs_start_pos 1) (rhs_end_pos 4)
        | PTVar _ -> mk_pexpr_loc (PAray_Field (_1, _3)) (PTVar (new_type_var ())) (rhs_start_pos 1) (rhs_end_pos 4)
        | _ -> raise (Type_mismatch (_1, et1, (PTAray (PTVar (new_type_var())))))        
        )
# 2260 "parser_yacc.ml"
               : 'expr_single))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr_single) in
    Obj.repr(
# 436 "parser_yacc.mly"
                           (_2)
# 2267 "parser_yacc.ml"
               : 'expr_single))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr_single) in
    Obj.repr(
# 439 "parser_yacc.mly"
                                             ([_1])
# 2274 "parser_yacc.ml"
               : 'nonempty_single_expr_list_comma))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr_single) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'nonempty_single_expr_list_comma) in
    Obj.repr(
# 440 "parser_yacc.mly"
                                                      (_1::_3)
# 2282 "parser_yacc.ml"
               : 'nonempty_single_expr_list_comma))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr_single) in
    Obj.repr(
# 443 "parser_yacc.mly"
                                       ([_1])
# 2289 "parser_yacc.ml"
               : 'nonempty_single_expr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr_single) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'nonempty_single_expr_list) in
    Obj.repr(
# 444 "parser_yacc.mly"
                                          (_1::_2)
# 2297 "parser_yacc.ml"
               : 'nonempty_single_expr_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 447 "parser_yacc.mly"
                    ([])
# 2303 "parser_yacc.ml"
               : 'expr_single_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr_single) in
    Obj.repr(
# 448 "parser_yacc.mly"
                    ([_1])
# 2310 "parser_yacc.ml"
               : 'expr_single_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr_single) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr_single_list) in
    Obj.repr(
# 449 "parser_yacc.mly"
                                             (_1::_3)
# 2318 "parser_yacc.ml"
               : 'expr_single_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 452 "parser_yacc.mly"
                ([])
# 2324 "parser_yacc.ml"
               : 'str_expr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 453 "parser_yacc.mly"
                                ([(_1, _3)])
# 2332 "parser_yacc.ml"
               : 'str_expr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'str_expr_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 454 "parser_yacc.mly"
                                                ((_2, _4) :: _1)
# 2341 "parser_yacc.ml"
               : 'str_expr_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 462 "parser_yacc.mly"
                        (_2)
# 2348 "parser_yacc.ml"
               : 'else_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'pattern_expr) in
    Obj.repr(
# 465 "parser_yacc.mly"
                                         ([_2])
# 2355 "parser_yacc.ml"
               : 'pattern_expr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pattern_expr_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pattern_expr) in
    Obj.repr(
# 466 "parser_yacc.mly"
                                                (_1 @ [_3])
# 2363 "parser_yacc.ml"
               : 'pattern_expr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pattern) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 468 "parser_yacc.mly"
                                    ((_1, _3))
# 2371 "parser_yacc.ml"
               : 'pattern_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 471 "parser_yacc.mly"
                (mk_ppat_loc (PPat_Symbol _1) (PTVar (new_type_var())) (rhs_start_pos 1) (rhs_end_pos 1))
# 2378 "parser_yacc.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 472 "parser_yacc.mly"
            (mk_ppat_loc (PPat_Int _1) PTInt (rhs_start_pos 1) (rhs_end_pos 1))
# 2385 "parser_yacc.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 473 "parser_yacc.mly"
            (mk_ppat_loc (PPat_Float _1) PTFloat (rhs_start_pos 1) (rhs_end_pos 1))
# 2392 "parser_yacc.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    Obj.repr(
# 474 "parser_yacc.mly"
                (mk_ppat_loc (PPat_Unt) PTUnt (rhs_start_pos 1) (rhs_end_pos 2))
# 2398 "parser_yacc.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'pattern_list) in
    Obj.repr(
# 475 "parser_yacc.mly"
                                              (
            match _3 with
            | [] -> mk_ppat_loc (PPat_Aray []) (PTAray (PTVar (new_type_var()))) (rhs_start_pos 1) (rhs_end_pos 5)
            | p::pl' -> mk_ppat_loc (PPat_Aray (_3)) (PTAray p.ptyp) (rhs_start_pos 1) (rhs_end_pos 5)
        )
# 2409 "parser_yacc.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    Obj.repr(
# 480 "parser_yacc.mly"
              (
        mk_ppat_loc (PPat_Lst []) (PTLst (PTVar (new_type_var()))) (rhs_start_pos 1) (rhs_end_pos 2)
      )
# 2417 "parser_yacc.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'pattern_list) in
    Obj.repr(
# 483 "parser_yacc.mly"
                             (
            mk_ppat_loc (PPat_Lst _2) (PTLst (List.hd _2).ptyp) (rhs_start_pos 1) (rhs_end_pos 3)
        )
# 2426 "parser_yacc.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pattern) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pattern) in
    Obj.repr(
# 486 "parser_yacc.mly"
                                    (mk_ppat_loc (PPat_Lst_Cons (_1, _3)) (_3.ptyp) (rhs_start_pos 1) (rhs_end_pos 3))
# 2434 "parser_yacc.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    Obj.repr(
# 487 "parser_yacc.mly"
                    (mk_ppat_loc PPat_Underline (PTVar (new_type_var())) (rhs_start_pos 1) (rhs_end_pos 1))
# 2440 "parser_yacc.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'pattern) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'nonempty_pattern_list_comma) in
    Obj.repr(
# 488 "parser_yacc.mly"
                                                          (mk_ppat_loc (PPat_Tuple (_2::_4)) (PTTuple (List.map (fun pat -> pat.ptyp) (_2::_4))) (rhs_start_pos 1) (rhs_end_pos 5))
# 2448 "parser_yacc.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 490 "parser_yacc.mly"
            (mk_ppat_loc (PPat_Constr (_1, None)) (PTVar (new_type_var())) (rhs_start_pos 1) (rhs_end_pos 1))
# 2455 "parser_yacc.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'pattern) in
    Obj.repr(
# 491 "parser_yacc.mly"
                     (mk_ppat_loc (PPat_Constr (_1, Some _2)) (PTVar (new_type_var())) (rhs_start_pos 1) (rhs_end_pos 2))
# 2463 "parser_yacc.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'pattern) in
    Obj.repr(
# 492 "parser_yacc.mly"
                        (_2)
# 2470 "parser_yacc.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'pattern) in
    Obj.repr(
# 495 "parser_yacc.mly"
                                     (_1)
# 2477 "parser_yacc.ml"
               : 'nonempty_pattern_list_comma))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pattern) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'nonempty_pattern_list_comma) in
    Obj.repr(
# 496 "parser_yacc.mly"
                                              (_1::_3)
# 2485 "parser_yacc.ml"
               : 'nonempty_pattern_list_comma))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'pattern) in
    Obj.repr(
# 499 "parser_yacc.mly"
                        ([_1])
# 2492 "parser_yacc.ml"
               : 'pattern_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pattern) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pattern_list) in
    Obj.repr(
# 500 "parser_yacc.mly"
                                     (_1 :: _3)
# 2500 "parser_yacc.ml"
               : 'pattern_list))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : (string list) * (Ast.psymbol_tbl) * ((Ast.pkripke_model) option))
;;
