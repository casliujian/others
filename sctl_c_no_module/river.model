Model River_Crossing()
{
	Var
	{
		farmer : Bool;
		wolf : Bool;
		goat : Bool;
		cabbage : Bool;
	}
	
	Init
	{
		farmer := false;
		wolf := false; 
		goat := false;
		cabbage := false;
	}
	
	Transition
	{
		(farmer = wolf) : {farmer := !farmer; wolf := !wolf;};
		(farmer = goat) : {farmer := !farmer; goat := !goat;};
		(farmer = cabbage) : {farmer := !farmer; cabbage := !cabbage;};
		true : {farmer := !farmer;};
	}
	
	Atomic
	{
		safe (s) := s((!((wolf = goat) && (wolf != farmer))) && (!((goat = cabbage) && (goat != farmer))));
		okay (s) := s((((farmer = true) && (wolf = true)) && (goat = true)) && (cabbage = true));
	}
	
	Spec
	{
		find := EU(x, y, safe(x), okay(y), ini);
	}
}
